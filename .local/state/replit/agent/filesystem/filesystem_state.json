{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# TechPulse - AI-Powered Tech News & Discussion Platform\n\n## Overview\n\nTechPulse is a modern, mobile-first tech news aggregator that centralizes trending stories from multiple sources (TechCrunch, The Verge, Hacker News, RSS feeds) and provides an AI-powered chat interface for intelligent discussion and analysis. The platform features a clean, responsive news feed with category filtering, search capabilities, bookmarking, sentiment analysis, and real-time AI assistance for article comprehension and discussion.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system and CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Authentication**: Replit Auth integration with session-based authentication\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Real-time Communication**: WebSocket implementation for live updates\n- **Session Management**: PostgreSQL-backed sessions using connect-pg-simple\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon serverless platform\n- **ORM**: Drizzle with schema-first approach and automatic type generation\n- **Session Storage**: Database-backed sessions for authentication persistence\n- **Schema Structure**:\n  - Users table for authentication and preferences\n  - Articles table with categorization, sentiment analysis, and view tracking\n  - Sources table for RSS feed management and fetching intervals\n  - Bookmarks table for user-specific article saving\n  - Chat conversations for AI interaction history\n  - Trending records for analytics and topic tracking\n  - Related articles for content discovery\n\n### Authentication and Authorization\n- **Provider**: Replit Auth with OpenID Connect (OIDC)\n- **Session Management**: Server-side sessions stored in PostgreSQL\n- **Security**: HTTP-only cookies with secure flag and session expiration\n- **User Management**: Automatic user creation and profile management\n\n### AI Integration\n- **Provider**: OpenAI GPT-4o for chat and analysis capabilities\n- **Features**:\n  - Article summarization (short, medium, long formats)\n  - Context-aware question answering\n  - Sentiment analysis for articles and topics\n  - Related article suggestions\n  - Technical concept explanations\n- **Context Management**: Article content injection for relevant AI responses\n\n### News Aggregation System\n- **Sources**: Configurable RSS feeds from major tech publications\n- **Processing**: Periodic fetching with configurable intervals per source\n- **Content Enhancement**: \n  - Automatic categorization (AI/ML, Startups, Cybersecurity, Mobile, Web3, Others)\n  - Sentiment analysis and scoring\n  - View count tracking and trending calculations\n  - Related article detection and linking\n\n### Mobile-First Design\n- **Responsive Layout**: Adaptive interface for desktop and mobile devices\n- **Mobile Chat**: Dedicated mobile chat interface for article discussions\n- **Touch Interactions**: Optimized for mobile gestures and navigation\n- **Progressive Enhancement**: Core functionality works across all device types\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon PostgreSQL serverless database\n- **Authentication**: Replit Auth OIDC provider\n- **Build Tool**: Vite with React plugin and development tooling\n\n### AI and Machine Learning\n- **OpenAI API**: GPT-4o model for chat, summarization, and sentiment analysis\n- **Natural Language Processing**: Article content analysis and categorization\n\n### News Sources and APIs\n- **RSS Feeds**: TechCrunch, The Verge, Hacker News, and configurable sources\n- **Content Parsing**: RSS feed parsing and content extraction\n- **Web Scraping**: Article content retrieval for full-text analysis\n\n### UI and Design System\n- **shadcn/ui**: Pre-built React components with Radix UI primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Radix UI**: Accessible component primitives\n- **Lucide React**: Icon system\n- **Font Awesome**: Additional icons and graphics\n\n### Development and Deployment\n- **TypeScript**: Type safety across frontend and backend\n- **ESBuild**: Fast bundling for production builds\n- **Replit**: Development and hosting environment\n- **WebSocket**: Real-time communication support\n\n### Data Management\n- **TanStack Query**: Caching, synchronization, and server state management\n- **Drizzle Kit**: Database migrations and schema management\n- **Date-fns**: Date manipulation and formatting\n- **Zod**: Schema validation and type inference","size_bytes":4945},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      screens: {\n        'xs': '475px',\n        'sm': '640px',\n        'md': '768px',\n        'lg': '1024px',\n        'xl': '1280px',\n        '2xl': '1536px',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2934},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/googleAuth.ts":{"content":"import { Strategy as GoogleStrategy } from \"passport-google-oauth20\";\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nexport function getGoogleSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupGoogleAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getGoogleSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Google OAuth Strategy\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: \"/api/auth/google/callback\",\n      scope: ['profile', 'email']\n    }, async (accessToken, refreshToken, profile, done) => {\n      try {\n        // Upsert user in database\n        await storage.upsertUser({\n          id: profile.id,\n          email: profile.emails?.[0]?.value || null,\n          firstName: profile.name?.givenName || null,\n          lastName: profile.name?.familyName || null,\n          profileImageUrl: profile.photos?.[0]?.value || null,\n        });\n        \n        const user = {\n          id: profile.id,\n          email: profile.emails?.[0]?.value,\n          displayName: profile.displayName,\n          firstName: profile.name?.givenName,\n          lastName: profile.name?.familyName,\n          profileImageUrl: profile.photos?.[0]?.value,\n        };\n        \n        return done(null, user);\n      } catch (error) {\n        return done(error, null);\n      }\n    }));\n  }\n\n  passport.serializeUser((user: any, done) => {\n    done(null, user);\n  });\n\n  passport.deserializeUser((user: any, done) => {\n    done(null, user);\n  });\n\n  // Google OAuth Routes\n  app.get(\"/api/auth/google\", \n    passport.authenticate(\"google\", { \n      scope: [\"profile\", \"email\"] \n    })\n  );\n\n  app.get(\"/api/auth/google/callback\",\n    passport.authenticate(\"google\", { \n      failureRedirect: \"/\" \n    }),\n    (req, res) => {\n      res.redirect(\"/\");\n    }\n  );\n\n  // Logout route\n  app.get(\"/api/auth/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\"/\");\n    });\n  });\n}\n\nexport const isAuthenticatedGoogle: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  return res.status(401).json({ message: \"Unauthorized\" });\n};","size_bytes":3003},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2090},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4261},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { aiService } from \"./services/aiService\";\nimport { newsService } from \"./services/newsService\";\n// Authentication removed - open access\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication removed - open access app\n\n  // Start news processing\n  newsService.startPeriodicUpdate();\n\n  // Public routes - no authentication required\n  app.get('/api/auth/user', async (req: any, res) => {\n    // Return a mock user for UI compatibility\n    res.json({ \n      id: 'guest', \n      email: 'guest@example.com', \n      firstName: 'Guest', \n      lastName: 'User' \n    });\n  });\n\n  // Articles routes\n  app.get('/api/articles', async (req: any, res) => {\n    try {\n      const userId = undefined; // No user tracking\n      const { category, timeRange, search, page = 1, limit = 20 } = req.query;\n      \n      const articles = await storage.getArticles({\n        category: category as string,\n        timeRange: timeRange as string,\n        search: search as string,\n        page: parseInt(page as string),\n        limit: parseInt(limit as string),\n        userId,\n      });\n\n      res.json(articles);\n    } catch (error) {\n      console.error(\"Error fetching articles:\", error);\n      res.status(500).json({ message: \"Failed to fetch articles\" });\n    }\n  });\n\n  app.get('/api/articles/:id', async (req: any, res) => {\n    try {\n      const userId = undefined; // No user tracking\n      const { id } = req.params;\n      \n      const article = await storage.getArticleById(id, userId);\n      if (!article) {\n        return res.status(404).json({ message: \"Article not found\" });\n      }\n\n      // Increment view count\n      await storage.incrementArticleViews(id);\n\n      res.json(article);\n    } catch (error) {\n      console.error(\"Error fetching article:\", error);\n      res.status(500).json({ message: \"Failed to fetch article\" });\n    }\n  });\n\n  app.get('/api/search', async (req: any, res) => {\n    try {\n      const userId = undefined; // No user tracking\n      const { q } = req.query;\n      \n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"Search query is required\" });\n      }\n\n      const articles = await storage.searchArticles(q, userId);\n      res.json(articles);\n    } catch (error) {\n      console.error(\"Error searching articles:\", error);\n      res.status(500).json({ message: \"Failed to search articles\" });\n    }\n  });\n\n  // Bookmarks routes - now public, no user tracking\n  app.get('/api/bookmarks', async (req: any, res) => {\n    try {\n      // Return empty bookmarks for guest users\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching bookmarks:\", error);\n      res.status(500).json({ message: \"Failed to fetch bookmarks\" });\n    }\n  });\n\n  app.post('/api/bookmarks', async (req: any, res) => {\n    try {\n      // Bookmarks disabled for guest users\n      res.status(200).json({ message: \"Bookmark feature disabled in guest mode\" });\n    } catch (error) {\n      console.error(\"Error creating bookmark:\", error);\n      res.status(500).json({ message: \"Failed to create bookmark\" });\n    }\n  });\n\n  app.delete('/api/bookmarks/:articleId', async (req: any, res) => {\n    try {\n      // Bookmarks disabled for guest users\n      res.status(200).json({ message: \"Bookmark feature disabled in guest mode\" });\n    } catch (error) {\n      console.error(\"Error deleting bookmark:\", error);\n      res.status(500).json({ message: \"Failed to delete bookmark\" });\n    }\n  });\n\n  // AI Chat routes - now public\n  app.post('/api/chat/summarize', async (req: any, res) => {\n    try {\n      const userId = 'guest'; // Guest user for AI features\n      const { articleId, mode = 'medium' } = req.body;\n\n      if (!articleId) {\n        return res.status(400).json({ message: \"Article ID is required\" });\n      }\n\n      const summary = await aiService.summarizeArticle({\n        articleId,\n        mode: mode as 'short' | 'medium' | 'long',\n        userId,\n      });\n\n      res.json({ summary });\n    } catch (error) {\n      console.error(\"Error summarizing article:\", error);\n      res.status(500).json({ message: \"Failed to summarize article\" });\n    }\n  });\n\n  app.post('/api/chat/message', async (req: any, res) => {\n    try {\n      const userId = 'guest'; // Guest user for AI features\n      const { articleId, message } = req.body;\n\n      if (!articleId || !message) {\n        return res.status(400).json({ message: \"Article ID and message are required\" });\n      }\n\n      // Get conversation history\n      const conversationHistory = await aiService.getChatHistory(userId, articleId);\n\n      const response = await aiService.chatAboutArticle({\n        articleId,\n        message,\n        userId,\n        conversationHistory,\n      });\n\n      res.json({ response });\n    } catch (error) {\n      console.error(\"Error processing chat message:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  app.get('/api/chat/:articleId/history', async (req: any, res) => {\n    try {\n      const userId = 'guest'; // Guest user for AI features\n      const { articleId } = req.params;\n\n      const history = await aiService.getChatHistory(userId, articleId);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  app.post('/api/chat/compare', async (req: any, res) => {\n    try {\n      const userId = 'guest'; // Guest user for AI features\n      const { articleIds } = req.body;\n\n      if (!Array.isArray(articleIds) || articleIds.length < 2) {\n        return res.status(400).json({ message: \"At least 2 article IDs are required\" });\n      }\n\n      const comparison = await aiService.compareArticles(articleIds, userId);\n      res.json({ comparison });\n    } catch (error) {\n      console.error(\"Error comparing articles:\", error);\n      res.status(500).json({ message: \"Failed to compare articles\" });\n    }\n  });\n\n  // Trending routes\n  app.get('/api/trending', async (req: any, res) => {\n    try {\n      const { range = 'today' } = req.query;\n      const trending = await storage.getTrendingTopics(range as string);\n      res.json(trending);\n    } catch (error) {\n      console.error(\"Error fetching trending topics:\", error);\n      res.status(500).json({ message: \"Failed to fetch trending topics\" });\n    }\n  });\n\n  // Sources routes\n  app.get('/api/sources', async (req: any, res) => {\n    try {\n      const sources = await storage.getSources();\n      res.json(sources);\n    } catch (error) {\n      console.error(\"Error fetching sources:\", error);\n      res.status(500).json({ message: \"Failed to fetch sources\" });\n    }\n  });\n\n  // Manual refresh route for testing\n  app.post('/api/refresh', async (req: any, res) => {\n    try {\n      await newsService.processNewArticles();\n      res.json({ message: \"News refresh completed\" });\n    } catch (error) {\n      console.error(\"Error refreshing news:\", error);\n      res.status(500).json({ message: \"Failed to refresh news\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket setup for real-time updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n\n  wss.on('connection', (ws: WebSocket) => {\n    console.log('WebSocket client connected');\n\n    ws.on('message', (message: string) => {\n      try {\n        const data = JSON.parse(message);\n        \n        if (data.type === 'subscribe') {\n          // Handle subscription to specific topics\n          console.log('Client subscribed to:', data.topic);\n        }\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      console.log('WebSocket client disconnected');\n    });\n\n    // Send initial connection message\n    if (ws.readyState === WebSocket.OPEN) {\n      ws.send(JSON.stringify({ \n        type: 'connected', \n        message: 'Connected to TechPulse real-time updates' \n      }));\n    }\n  });\n\n  // Broadcast updates to connected clients\n  const broadcastUpdate = (type: string, data: any) => {\n    wss.clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN) {\n        client.send(JSON.stringify({ type, data }));\n      }\n    });\n  };\n\n  // Example: Broadcast when new articles are available\n  setInterval(() => {\n    broadcastUpdate('heartbeat', { timestamp: Date.now() });\n  }, 30000); // Every 30 seconds\n\n  return httpServer;\n}\n","size_bytes":8677},"server/storage.ts":{"content":"import {\n  users,\n  articles,\n  sources,\n  bookmarks,\n  chatConversations,\n  trendingRecords,\n  relatedArticles,\n  type User,\n  type UpsertUser,\n  type Article,\n  type InsertArticle,\n  type ArticleWithSource,\n  type ArticleWithRelated,\n  type Source,\n  type InsertSource,\n  type Bookmark,\n  type InsertBookmark,\n  type ChatConversation,\n  type InsertChatConversation,\n  type TrendingRecord,\n  type InsertTrendingRecord,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, sql, like, inArray, gte, lte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // Source operations\n  getSources(): Promise<Source[]>;\n  createSource(source: InsertSource): Promise<Source>;\n  updateSourceLastFetch(id: string): Promise<void>;\n  \n  // Article operations\n  getArticles(params: {\n    category?: string;\n    timeRange?: string;\n    search?: string;\n    page?: number;\n    limit?: number;\n    userId?: string;\n  }): Promise<ArticleWithRelated[]>;\n  getArticleById(id: string, userId?: string): Promise<ArticleWithRelated | undefined>;\n  createArticle(article: InsertArticle): Promise<Article>;\n  updateArticle(id: string, updates: Partial<InsertArticle>): Promise<Article>;\n  incrementArticleViews(id: string): Promise<void>;\n  \n  // Bookmark operations\n  getBookmarks(userId: string): Promise<ArticleWithSource[]>;\n  createBookmark(bookmark: InsertBookmark): Promise<Bookmark>;\n  deleteBookmark(userId: string, articleId: string): Promise<void>;\n  isBookmarked(userId: string, articleId: string): Promise<boolean>;\n  \n  // Chat operations\n  getChatConversation(userId: string, articleId: string): Promise<ChatConversation | undefined>;\n  createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation>;\n  updateChatConversation(id: string, messages: any[]): Promise<ChatConversation>;\n  \n  // Trending operations\n  getTrendingTopics(timeRange?: string): Promise<TrendingRecord[]>;\n  createTrendingRecord(record: InsertTrendingRecord): Promise<TrendingRecord>;\n  \n  // Related articles\n  getRelatedArticles(articleId: string): Promise<ArticleWithSource[]>;\n  createRelatedArticle(articleId: string, relatedArticleId: string, similarityScore: number): Promise<void>;\n  \n  // Search operations\n  searchArticles(query: string, userId?: string): Promise<ArticleWithRelated[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Source operations\n  async getSources(): Promise<Source[]> {\n    return await db.select().from(sources).where(eq(sources.isActive, true));\n  }\n\n  async createSource(source: InsertSource): Promise<Source> {\n    const [newSource] = await db.insert(sources).values(source).returning();\n    return newSource;\n  }\n\n  async updateSourceLastFetch(id: string): Promise<void> {\n    await db\n      .update(sources)\n      .set({ lastFetchAt: new Date() })\n      .where(eq(sources.id, id));\n  }\n\n  // Article operations\n  async getArticles(params: {\n    category?: string;\n    timeRange?: string;\n    search?: string;\n    page?: number;\n    limit?: number;\n    userId?: string;\n  }): Promise<ArticleWithRelated[]> {\n    const page = params.page || 1;\n    const limit = params.limit || 20;\n    const offset = (page - 1) * limit;\n    \n    let whereConditions = [];\n    \n    if (params.category && params.category !== 'all') {\n      whereConditions.push(eq(articles.category, params.category as any));\n    }\n    \n    if (params.timeRange) {\n      const now = new Date();\n      let timeThreshold: Date;\n      \n      switch (params.timeRange) {\n        case 'today':\n          timeThreshold = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n          break;\n        case 'week':\n          timeThreshold = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n          break;\n        case 'month':\n          timeThreshold = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n          break;\n        default:\n          timeThreshold = new Date(0);\n      }\n      \n      whereConditions.push(gte(articles.publishedAt, timeThreshold));\n    }\n    \n    if (params.search) {\n      whereConditions.push(\n        or(\n          like(articles.title, `%${params.search}%`),\n          like(articles.content, `%${params.search}%`)\n        )\n      );\n    }\n\n    const query = db\n      .select({\n        article: articles,\n        source: sources,\n        isBookmarked: params.userId \n          ? sql<boolean>`EXISTS(SELECT 1 FROM ${bookmarks} WHERE ${bookmarks.userId} = ${params.userId} AND ${bookmarks.articleId} = ${articles.id})`\n          : sql<boolean>`false`,\n      })\n      .from(articles)\n      .leftJoin(sources, eq(articles.sourceId, sources.id))\n      .where(whereConditions.length > 0 ? and(...whereConditions) : undefined)\n      .orderBy(desc(articles.publishedAt))\n      .limit(params.limit || 20)\n      .offset(offset);\n\n    const results = await query;\n    \n    return results.map(row => ({\n      ...row.article,\n      source: row.source,\n      isBookmarked: row.isBookmarked,\n    }));\n  }\n\n  async getArticleById(id: string, userId?: string): Promise<ArticleWithRelated | undefined> {\n    const query = db\n      .select({\n        article: articles,\n        source: sources,\n        isBookmarked: userId \n          ? sql<boolean>`EXISTS(SELECT 1 FROM ${bookmarks} WHERE ${bookmarks.userId} = ${userId} AND ${bookmarks.articleId} = ${articles.id})`\n          : sql<boolean>`false`,\n      })\n      .from(articles)\n      .leftJoin(sources, eq(articles.sourceId, sources.id))\n      .where(eq(articles.id, id));\n\n    const [result] = await query;\n    \n    if (!result) return undefined;\n\n    const relatedArticles = await this.getRelatedArticles(id);\n\n    return {\n      ...result.article,\n      source: result.source,\n      isBookmarked: result.isBookmarked,\n      relatedArticles,\n    };\n  }\n\n  async createArticle(article: InsertArticle): Promise<Article> {\n    const [newArticle] = await db.insert(articles).values(article).returning();\n    return newArticle;\n  }\n\n  async updateArticle(id: string, updates: Partial<InsertArticle>): Promise<Article> {\n    const [updatedArticle] = await db\n      .update(articles)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(articles.id, id))\n      .returning();\n    return updatedArticle;\n  }\n\n  async incrementArticleViews(id: string): Promise<void> {\n    await db\n      .update(articles)\n      .set({ viewCount: sql`${articles.viewCount} + 1` })\n      .where(eq(articles.id, id));\n  }\n\n  // Bookmark operations\n  async getBookmarks(userId: string): Promise<ArticleWithSource[]> {\n    const results = await db\n      .select({\n        article: articles,\n        source: sources,\n      })\n      .from(bookmarks)\n      .innerJoin(articles, eq(bookmarks.articleId, articles.id))\n      .leftJoin(sources, eq(articles.sourceId, sources.id))\n      .where(eq(bookmarks.userId, userId))\n      .orderBy(desc(bookmarks.savedAt));\n\n    return results.map(row => ({\n      ...row.article,\n      source: row.source,\n    }));\n  }\n\n  async createBookmark(bookmark: InsertBookmark): Promise<Bookmark> {\n    const [newBookmark] = await db.insert(bookmarks).values(bookmark).returning();\n    return newBookmark;\n  }\n\n  async deleteBookmark(userId: string, articleId: string): Promise<void> {\n    await db\n      .delete(bookmarks)\n      .where(and(eq(bookmarks.userId, userId), eq(bookmarks.articleId, articleId)));\n  }\n\n  async isBookmarked(userId: string, articleId: string): Promise<boolean> {\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(bookmarks)\n      .where(and(eq(bookmarks.userId, userId), eq(bookmarks.articleId, articleId)));\n    \n    return result.count > 0;\n  }\n\n  // Chat operations\n  async getChatConversation(userId: string, articleId: string): Promise<ChatConversation | undefined> {\n    const [conversation] = await db\n      .select()\n      .from(chatConversations)\n      .where(and(eq(chatConversations.userId, userId), eq(chatConversations.articleId, articleId)));\n    \n    return conversation;\n  }\n\n  async createChatConversation(conversation: InsertChatConversation): Promise<ChatConversation> {\n    const [newConversation] = await db\n      .insert(chatConversations)\n      .values(conversation)\n      .returning();\n    return newConversation;\n  }\n\n  async updateChatConversation(id: string, messages: any[]): Promise<ChatConversation> {\n    const [updatedConversation] = await db\n      .update(chatConversations)\n      .set({ \n        messages: JSON.stringify(messages), \n        lastActiveAt: new Date() \n      })\n      .where(eq(chatConversations.id, id))\n      .returning();\n    return updatedConversation;\n  }\n\n  // Trending operations\n  async getTrendingTopics(timeRange = 'today'): Promise<TrendingRecord[]> {\n    const now = new Date();\n    let timeThreshold: Date;\n    \n    switch (timeRange) {\n      case 'today':\n        timeThreshold = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case 'week':\n        timeThreshold = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      default:\n        timeThreshold = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n    }\n\n    return await db\n      .select()\n      .from(trendingRecords)\n      .where(gte(trendingRecords.date, timeThreshold))\n      .orderBy(desc(trendingRecords.growthRate))\n      .limit(10);\n  }\n\n  async createTrendingRecord(record: InsertTrendingRecord): Promise<TrendingRecord> {\n    const [newRecord] = await db.insert(trendingRecords).values(record).returning();\n    return newRecord;\n  }\n\n  // Related articles\n  async getRelatedArticles(articleId: string): Promise<ArticleWithSource[]> {\n    const results = await db\n      .select({\n        article: articles,\n        source: sources,\n      })\n      .from(relatedArticles)\n      .innerJoin(articles, eq(relatedArticles.relatedArticleId, articles.id))\n      .leftJoin(sources, eq(articles.sourceId, sources.id))\n      .where(eq(relatedArticles.articleId, articleId))\n      .orderBy(desc(relatedArticles.similarityScore))\n      .limit(5);\n\n    return results.map(row => ({\n      ...row.article,\n      source: row.source,\n    }));\n  }\n\n  async createRelatedArticle(articleId: string, relatedArticleId: string, similarityScore: number): Promise<void> {\n    await db.insert(relatedArticles).values({\n      articleId,\n      relatedArticleId,\n      similarityScore,\n    });\n  }\n\n  // Search operations\n  async searchArticles(query: string, userId?: string): Promise<ArticleWithRelated[]> {\n    const searchCondition = or(\n      like(articles.title, `%${query}%`),\n      like(articles.content, `%${query}%`),\n      like(articles.snippet, `%${query}%`)\n    );\n\n    const results = await db\n      .select({\n        article: articles,\n        source: sources,\n        isBookmarked: userId \n          ? sql<boolean>`EXISTS(SELECT 1 FROM ${bookmarks} WHERE ${bookmarks.userId} = ${userId} AND ${bookmarks.articleId} = ${articles.id})`\n          : sql<boolean>`false`,\n      })\n      .from(articles)\n      .leftJoin(sources, eq(articles.sourceId, sources.id))\n      .where(searchCondition)\n      .orderBy(desc(articles.publishedAt))\n      .limit(50);\n\n    return results.map(row => ({\n      ...row.article,\n      source: row.source,\n      isBookmarked: row.isBookmarked,\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":11878},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  boolean,\n  real,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  preferences: jsonb(\"preferences\").default('{}'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// News categories enum\nexport const categoryEnum = pgEnum('category', [\n  'ai_ml',\n  'startups',\n  'cybersecurity',\n  'mobile',\n  'web3',\n  'others'\n]);\n\n// News sources\nexport const sources = pgTable(\"sources\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  url: varchar(\"url\").notNull(),\n  rssUrl: varchar(\"rss_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  fetchInterval: integer(\"fetch_interval\").default(300), // seconds\n  lastFetchAt: timestamp(\"last_fetch_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Articles\nexport const articles = pgTable(\"articles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  url: varchar(\"url\").notNull().unique(),\n  content: text(\"content\"),\n  snippet: text(\"snippet\"),\n  sourceId: varchar(\"source_id\").references(() => sources.id),\n  publishedAt: timestamp(\"published_at\"),\n  fetchedAt: timestamp(\"fetched_at\").defaultNow(),\n  category: categoryEnum(\"category\").default('others'),\n  thumbnail: varchar(\"thumbnail\"),\n  sentiment: varchar(\"sentiment\"), // positive, negative, neutral\n  sentimentScore: real(\"sentiment_score\"),\n  embedding: text(\"embedding\"), // JSON string of embedding vector\n  viewCount: integer(\"view_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_articles_published_at\").on(table.publishedAt),\n  index(\"idx_articles_category\").on(table.category),\n  index(\"idx_articles_source_id\").on(table.sourceId),\n]);\n\n// Bookmarks\nexport const bookmarks = pgTable(\"bookmarks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  articleId: varchar(\"article_id\").references(() => articles.id).notNull(),\n  savedAt: timestamp(\"saved_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_bookmarks_user_id\").on(table.userId),\n  index(\"idx_bookmarks_article_id\").on(table.articleId),\n]);\n\n// Chat conversations\nexport const chatConversations = pgTable(\"chat_conversations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  articleId: varchar(\"article_id\").references(() => articles.id).notNull(),\n  messages: jsonb(\"messages\").default('[]'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  lastActiveAt: timestamp(\"last_active_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_chat_user_id\").on(table.userId),\n  index(\"idx_chat_article_id\").on(table.articleId),\n]);\n\n// Trending records\nexport const trendingRecords = pgTable(\"trending_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull(),\n  topic: varchar(\"topic\").notNull(),\n  count: integer(\"count\").notNull(),\n  category: categoryEnum(\"category\"),\n  growthRate: real(\"growth_rate\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_trending_date\").on(table.date),\n  index(\"idx_trending_topic\").on(table.topic),\n]);\n\n// Related articles (for similarity suggestions)\nexport const relatedArticles = pgTable(\"related_articles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  articleId: varchar(\"article_id\").references(() => articles.id).notNull(),\n  relatedArticleId: varchar(\"related_article_id\").references(() => articles.id).notNull(),\n  similarityScore: real(\"similarity_score\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_related_article_id\").on(table.articleId),\n  index(\"idx_related_similarity\").on(table.similarityScore),\n]);\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  bookmarks: many(bookmarks),\n  chatConversations: many(chatConversations),\n}));\n\nexport const articlesRelations = relations(articles, ({ one, many }) => ({\n  source: one(sources, {\n    fields: [articles.sourceId],\n    references: [sources.id],\n  }),\n  bookmarks: many(bookmarks),\n  chatConversations: many(chatConversations),\n  relatedFrom: many(relatedArticles, { relationName: \"articleToRelated\" }),\n  relatedTo: many(relatedArticles, { relationName: \"relatedToArticle\" }),\n}));\n\nexport const sourcesRelations = relations(sources, ({ many }) => ({\n  articles: many(articles),\n}));\n\nexport const bookmarksRelations = relations(bookmarks, ({ one }) => ({\n  user: one(users, {\n    fields: [bookmarks.userId],\n    references: [users.id],\n  }),\n  article: one(articles, {\n    fields: [bookmarks.articleId],\n    references: [articles.id],\n  }),\n}));\n\nexport const chatConversationsRelations = relations(chatConversations, ({ one }) => ({\n  user: one(users, {\n    fields: [chatConversations.userId],\n    references: [users.id],\n  }),\n  article: one(articles, {\n    fields: [chatConversations.articleId],\n    references: [articles.id],\n  }),\n}));\n\nexport const relatedArticlesRelations = relations(relatedArticles, ({ one }) => ({\n  article: one(articles, {\n    fields: [relatedArticles.articleId],\n    references: [articles.id],\n    relationName: \"articleToRelated\",\n  }),\n  relatedArticle: one(articles, {\n    fields: [relatedArticles.relatedArticleId],\n    references: [articles.id],\n    relationName: \"relatedToArticle\",\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const upsertUserSchema = createInsertSchema(users).pick({\n  id: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n});\n\nexport const insertSourceSchema = createInsertSchema(sources).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertArticleSchema = createInsertSchema(articles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  viewCount: true,\n});\n\nexport const insertBookmarkSchema = createInsertSchema(bookmarks).omit({\n  id: true,\n  savedAt: true,\n});\n\nexport const insertChatConversationSchema = createInsertSchema(chatConversations).omit({\n  id: true,\n  createdAt: true,\n  lastActiveAt: true,\n});\n\nexport const insertTrendingRecordSchema = createInsertSchema(trendingRecords).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = z.infer<typeof upsertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Source = typeof sources.$inferSelect;\nexport type InsertSource = z.infer<typeof insertSourceSchema>;\nexport type Article = typeof articles.$inferSelect;\nexport type InsertArticle = z.infer<typeof insertArticleSchema>;\nexport type Bookmark = typeof bookmarks.$inferSelect;\nexport type InsertBookmark = z.infer<typeof insertBookmarkSchema>;\nexport type ChatConversation = typeof chatConversations.$inferSelect;\nexport type InsertChatConversation = z.infer<typeof insertChatConversationSchema>;\nexport type TrendingRecord = typeof trendingRecords.$inferSelect;\nexport type InsertTrendingRecord = z.infer<typeof insertTrendingRecordSchema>;\nexport type RelatedArticle = typeof relatedArticles.$inferSelect;\n\n// Article with related data\nexport type ArticleWithSource = Article & {\n  source: Source | null;\n};\n\nexport type ArticleWithRelated = ArticleWithSource & {\n  isBookmarked?: boolean;\n  relatedArticles?: ArticleWithSource[];\n};\n","size_bytes":8340},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/hooks/useTheme\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\n\nfunction Router() {\n  // Authentication removed - show Landing page by default, Home for app routes\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/app\" component={Home} />\n      <Route path=\"/app/*\" component={Home} />\n      <Route path=\"/bookmarks\" component={Home} />\n      <Route path=\"/article/:id\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1120},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(147, 100%, 28%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(147, 100%, 88%);\n  --secondary-foreground: hsl(147, 100%, 28%);\n  --muted: hsl(210, 16%, 98%);\n  --muted-foreground: hsl(210, 25%, 45%);\n  --accent: hsl(147, 100%, 96%);\n  --accent-foreground: hsl(147, 100%, 28%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 16%, 93%);\n  --input: hsl(210, 16%, 97%);\n  --ring: hsl(147, 100%, 28%);\n  --chart-1: hsl(147, 100%, 28%);\n  --chart-2: hsl(147, 100%, 35%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(147, 100%, 28%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(147, 100%, 96%);\n  --sidebar-accent-foreground: hsl(147, 100%, 28%);\n  --sidebar-border: hsl(210, 16%, 93%);\n  --sidebar-ring: hsl(147, 100%, 28%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --tech-blue: hsl(203.8863, 88.2845%, 53.1373%);\n  --tech-green: hsl(147, 100%, 28%);\n  --slate-850: hsl(210, 25%, 15%);\n}\n\n.dark {\n  --background: hsl(210, 25%, 5%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(210, 25%, 12%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(210, 25%, 5%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(147, 100%, 35%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(147, 30%, 25%);\n  --secondary-foreground: hsl(147, 100%, 85%);\n  --muted: hsl(210, 25%, 8%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(210, 25%, 15%);\n  --accent-foreground: hsl(147, 100%, 65%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 25%, 18%);\n  --input: hsl(210, 25%, 20%);\n  --ring: hsl(147, 100%, 35%);\n  --chart-1: hsl(147, 100%, 35%);\n  --chart-2: hsl(147, 80%, 45%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(210, 25%, 12%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(147, 100%, 35%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 25%, 12%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(210, 25%, 25%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --tech-blue: hsl(203.8863, 88.2845%, 53.1373%);\n  --tech-green: hsl(159.7826, 100%, 36.0784%);\n  --slate-850: hsl(210, 25%, 15%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n    line-height: 1.6;\n  }\n}\n\n/* Mobile-first responsive design improvements */\n@layer utilities {\n  .scrollbar-hide {\n    -ms-overflow-style: none;\n    scrollbar-width: none;\n  }\n  \n  .scrollbar-hide::-webkit-scrollbar {\n    display: none;\n  }\n\n  /* Custom breakpoint for extra small devices */\n  @media (min-width: 475px) {\n    .xs\\:flex {\n      display: flex;\n    }\n    \n    .xs\\:hidden {\n      display: none;\n    }\n  }\n}\n\n@layer base {\n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold;\n    line-height: 1.3;\n  }\n\n  p {\n    @apply leading-relaxed;\n  }\n}\n\n@layer components {\n  .tech-gradient {\n    background: linear-gradient(135deg, var(--tech-blue) 0%, var(--tech-green) 100%);\n  }\n\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n\n  .line-clamp-3 {\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n  }\n}\n\n@layer utilities {\n  .text-tech-blue {\n    color: var(--tech-blue);\n  }\n\n  .text-tech-green {\n    color: var(--tech-green);\n  }\n\n  .bg-tech-blue {\n    background-color: var(--tech-blue);\n  }\n\n  .bg-tech-green {\n    background-color: var(--tech-green);\n  }\n\n  .bg-slate-850 {\n    background-color: var(--slate-850);\n  }\n\n  /* Mobile-first responsive utilities */\n  .mobile-safe-padding {\n    padding-left: max(1rem, env(safe-area-inset-left));\n    padding-right: max(1rem, env(safe-area-inset-right));\n  }\n\n  .touch-manipulation {\n    touch-action: manipulation;\n  }\n\n  /* Skeleton loading animations */\n  .skeleton {\n    @apply animate-pulse bg-muted;\n  }\n\n  .border-tech-blue {\n    border-color: var(--tech-blue);\n  }\n\n  .hover\\:bg-tech-blue:hover {\n    background-color: var(--tech-blue);\n  }\n\n  .focus\\:ring-tech-blue:focus {\n    --tw-ring-color: var(--tech-blue);\n  }\n}\n","size_bytes":5165},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/aiService.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"../storage\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = process.env.OPENAI_API_KEY ? new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY\n}) : null;\n\ninterface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: number;\n}\n\ninterface SummarizationRequest {\n  articleId: string;\n  mode: 'short' | 'medium' | 'long';\n  userId: string;\n}\n\ninterface ChatRequest {\n  articleId: string;\n  message: string;\n  userId: string;\n  conversationHistory?: ChatMessage[];\n}\n\nexport class AIService {\n  private getSystemPrompt(): string {\n    return `You are TechPulse Assistant, an expert in technology news and analysis. \n    \n    Your capabilities include:\n    - Summarizing tech articles with different levels of detail\n    - Answering questions about article content\n    - Providing context and background on tech topics\n    - Comparing multiple articles or topics\n    - Explaining technical concepts in accessible language\n    \n    Guidelines:\n    - Always cite the article when making claims about its content\n    - If asked about information not in the provided article, clearly state this limitation\n    - Keep responses concise but informative\n    - Use markdown formatting for better readability\n    - When uncertain, ask for clarification rather than hallucinating\n    - Focus on factual, objective analysis\n    \n    Always include source references in your responses when discussing article content.`;\n  }\n\n  private async getArticleContext(articleId: string): Promise<string> {\n    const article = await storage.getArticleById(articleId);\n    if (!article) {\n      throw new Error('Article not found');\n    }\n\n    // Create a condensed version of the article for context\n    const context = `\n**Article Title:** ${article.title}\n**Source:** ${article.source?.name || 'Unknown'}\n**Published:** ${article.publishedAt?.toLocaleDateString() || 'Unknown'}\n**Category:** ${article.category}\n**URL:** ${article.url}\n\n**Content Summary:**\n${article.snippet || article.content?.substring(0, 1000) || 'No content available'}\n\n${article.content && article.content.length > 1000 ? '**Full Content:**\\n' + article.content.substring(0, 3000) + (article.content.length > 3000 ? '...' : '') : ''}\n    `.trim();\n\n    return context;\n  }\n\n  async summarizeArticle(request: SummarizationRequest): Promise<string> {\n    try {\n      const articleContext = await this.getArticleContext(request.articleId);\n      \n      if (!openai) {\n        // Return fallback summary when API key is not available\n        const article = await storage.getArticleById(request.articleId);\n        if (!article) {\n          throw new Error('Article not found');\n        }\n        \n        const snippet = article.snippet || article.content?.substring(0, 300) || 'No content available';\n        return `**Content Preview** (AI summarization requires API key)\\n\\n${snippet}${snippet.length >= 300 ? '...' : ''}`;\n      }\n      \n      let promptInstructions = '';\n      switch (request.mode) {\n        case 'short':\n          promptInstructions = 'Provide a concise 1-2 sentence summary highlighting the main point.';\n          break;\n        case 'medium':\n          promptInstructions = 'Provide a 3-4 sentence summary covering the key points and implications.';\n          break;\n        case 'long':\n          promptInstructions = 'Provide a detailed paragraph summary with bullet points for key takeaways and potential impact.';\n          break;\n      }\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: this.getSystemPrompt() },\n          { \n            role: \"user\", \n            content: `${promptInstructions}\\n\\nArticle to summarize:\\n${articleContext}` \n          }\n        ],\n        max_tokens: request.mode === 'long' ? 500 : request.mode === 'medium' ? 200 : 100,\n        temperature: 0.3,\n      });\n\n      const summary = response.choices[0].message.content;\n      if (!summary) {\n        throw new Error('No summary generated');\n      }\n\n      // Save the conversation\n      await this.saveChatMessage(request.userId, request.articleId, [\n        { role: 'user', content: `Summarize this article (${request.mode} mode)`, timestamp: Date.now() },\n        { role: 'assistant', content: summary, timestamp: Date.now() }\n      ]);\n\n      return summary;\n    } catch (error) {\n      console.error('Error summarizing article:', error);\n      throw new Error('Failed to summarize article');\n    }\n  }\n\n  async chatAboutArticle(request: ChatRequest): Promise<string> {\n    try {\n      if (!openai) {\n        return \"AI chat is temporarily unavailable. Please provide an OpenAI API key to enable intelligent article discussions.\";\n      }\n      \n      const articleContext = await this.getArticleContext(request.articleId);\n      \n      const messages: any[] = [\n        { role: \"system\", content: this.getSystemPrompt() },\n        { \n          role: \"system\", \n          content: `Here is the article you should reference in your responses:\\n${articleContext}` \n        }\n      ];\n\n      // Add conversation history\n      if (request.conversationHistory) {\n        messages.push(...request.conversationHistory.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        })));\n      }\n\n      // Add current user message\n      messages.push({ role: \"user\", content: request.message });\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: messages,\n        max_tokens: 800,\n        temperature: 0.4,\n      });\n\n      const aiResponse = response.choices[0].message.content;\n      if (!aiResponse) {\n        throw new Error('No response generated');\n      }\n\n      // Save the conversation\n      const updatedHistory = [\n        ...(request.conversationHistory || []),\n        { role: 'user' as const, content: request.message, timestamp: Date.now() },\n        { role: 'assistant' as const, content: aiResponse, timestamp: Date.now() }\n      ];\n      \n      await this.saveChatMessage(request.userId, request.articleId, updatedHistory);\n\n      return aiResponse;\n    } catch (error) {\n      console.error('Error in chat:', error);\n      throw new Error('Failed to process chat message');\n    }\n  }\n\n  async analyzeSentiment(text: string): Promise<{ sentiment: string; score: number; confidence: number }> {\n    try {\n      if (!openai) {\n        // Return neutral sentiment when API key is not available\n        return { sentiment: 'neutral', score: 0, confidence: 0 };\n      }\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: `Analyze the sentiment of the provided text. Respond with JSON in this exact format: \n            { \"sentiment\": \"positive|negative|neutral\", \"score\": number_between_-1_and_1, \"confidence\": number_between_0_and_1 }`\n          },\n          {\n            role: \"user\",\n            content: `Analyze the sentiment of this text:\\n\\n${text.substring(0, 2000)}`\n          }\n        ],\n        response_format: { type: \"json_object\" },\n        max_tokens: 100,\n        temperature: 0.1,\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || '{}');\n      \n      return {\n        sentiment: result.sentiment || 'neutral',\n        score: Math.max(-1, Math.min(1, result.score || 0)),\n        confidence: Math.max(0, Math.min(1, result.confidence || 0.5)),\n      };\n    } catch (error) {\n      console.error('Error analyzing sentiment:', error);\n      return { sentiment: 'neutral', score: 0, confidence: 0 };\n    }\n  }\n\n  async compareArticles(articleIds: string[], userId: string): Promise<string> {\n    try {\n      const articles = await Promise.all(\n        articleIds.map(id => storage.getArticleById(id))\n      );\n\n      const validArticles = articles.filter(article => article !== undefined);\n      \n      if (validArticles.length < 2) {\n        throw new Error('Need at least 2 articles to compare');\n      }\n\n      const articleContexts = validArticles.map((article, index) => \n        `**Article ${index + 1}: ${article!.title}**\\n${article!.snippet || article!.content?.substring(0, 500) || ''}`\n      ).join('\\n\\n');\n\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          { role: \"system\", content: this.getSystemPrompt() },\n          { \n            role: \"user\", \n            content: `Compare and contrast these tech articles. Highlight key differences, similarities, and potential implications:\\n\\n${articleContexts}` \n          }\n        ],\n        max_tokens: 1000,\n        temperature: 0.4,\n      });\n\n      return response.choices[0].message.content || 'Unable to generate comparison';\n    } catch (error) {\n      console.error('Error comparing articles:', error);\n      throw new Error('Failed to compare articles');\n    }\n  }\n\n  private async saveChatMessage(userId: string, articleId: string, messages: ChatMessage[]): Promise<void> {\n    try {\n      let conversation = await storage.getChatConversation(userId, articleId);\n      \n      if (conversation) {\n        await storage.updateChatConversation(conversation.id, messages);\n      } else {\n        await storage.createChatConversation({\n          userId,\n          articleId,\n          messages: JSON.stringify(messages),\n        });\n      }\n    } catch (error) {\n      console.error('Error saving chat message:', error);\n    }\n  }\n\n  async getChatHistory(userId: string, articleId: string): Promise<ChatMessage[]> {\n    try {\n      const conversation = await storage.getChatConversation(userId, articleId);\n      if (!conversation || !conversation.messages) {\n        return [];\n      }\n\n      const messages = typeof conversation.messages === 'string' \n        ? JSON.parse(conversation.messages)\n        : conversation.messages;\n\n      return Array.isArray(messages) ? messages : [];\n    } catch (error) {\n      console.error('Error getting chat history:', error);\n      return [];\n    }\n  }\n\n  async generateEmbedding(text: string): Promise<number[]> {\n    try {\n      const response = await openai.embeddings.create({\n        model: \"text-embedding-3-small\",\n        input: text.substring(0, 8000), // Limit text length\n      });\n\n      return response.data[0].embedding;\n    } catch (error) {\n      console.error('Error generating embedding:', error);\n      return [];\n    }\n  }\n}\n\nexport const aiService = new AIService();\n","size_bytes":10656},"server/services/newsService.ts":{"content":"import { storage } from \"../storage\";\nimport { aiService } from \"./aiService\";\nimport { rssService } from \"./rssService\";\nimport { InsertTrendingRecord } from \"@shared/schema\";\n\nexport class NewsService {\n  async processNewArticles(): Promise<void> {\n    console.log('Starting news processing...');\n    \n    // Initialize default sources if needed\n    await rssService.initializeDefaultSources();\n    \n    // Fetch articles from all sources\n    await rssService.fetchAllSources();\n    \n    // Process sentiment analysis for recent articles\n    await this.processSentimentAnalysis();\n    \n    // Generate trending topics\n    await this.updateTrendingTopics();\n    \n    console.log('News processing completed');\n  }\n\n  private async processSentimentAnalysis(): Promise<void> {\n    try {\n      // Get recent articles without sentiment analysis\n      const recentArticles = await storage.getArticles({ \n        timeRange: 'today', \n        limit: 50 \n      });\n\n      for (const article of recentArticles) {\n        if (article.sentiment || !article.content) continue;\n\n        try {\n          const sentimentResult = await aiService.analyzeSentiment(\n            article.title + '\\n' + (article.content || article.snippet || '')\n          );\n\n          await storage.updateArticle(article.id, {\n            sentiment: sentimentResult.sentiment,\n            sentimentScore: sentimentResult.score,\n          });\n\n          console.log(`Processed sentiment for: ${article.title}`);\n        } catch (error) {\n          console.error(`Error processing sentiment for article ${article.id}:`, error);\n        }\n      }\n    } catch (error) {\n      console.error('Error in sentiment processing:', error);\n    }\n  }\n\n  private async updateTrendingTopics(): Promise<void> {\n    try {\n      const recentArticles = await storage.getArticles({ \n        timeRange: 'today', \n        limit: 100 \n      });\n\n      // Extract keywords and count frequency\n      const keywordCounts = new Map<string, number>();\n      const categoryTopics = new Map<string, Map<string, number>>();\n\n      for (const article of recentArticles) {\n        // Extract keywords from title and content\n        const text = (article.title + ' ' + (article.snippet || '')).toLowerCase();\n        const keywords = this.extractKeywords(text);\n        \n        // Initialize category map if needed\n        if (!categoryTopics.has(article.category)) {\n          categoryTopics.set(article.category, new Map());\n        }\n        const categoryMap = categoryTopics.get(article.category)!;\n\n        for (const keyword of keywords) {\n          keywordCounts.set(keyword, (keywordCounts.get(keyword) || 0) + 1);\n          categoryMap.set(keyword, (categoryMap.get(keyword) || 0) + 1);\n        }\n      }\n\n      // Store trending topics\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      // Top overall trending topics\n      const sortedKeywords = Array.from(keywordCounts.entries())\n        .sort(([, a], [, b]) => b - a)\n        .slice(0, 20);\n\n      for (const [topic, count] of sortedKeywords) {\n        if (count >= 3) { // Only topics mentioned at least 3 times\n          const growthRate = this.calculateGrowthRate(topic, count);\n          \n          const trendingRecord: InsertTrendingRecord = {\n            date: today,\n            topic,\n            count,\n            growthRate,\n          };\n\n          await storage.createTrendingRecord(trendingRecord);\n        }\n      }\n\n      // Category-specific trending topics\n      for (const [category, topics] of categoryTopics) {\n        const sortedCategoryTopics = Array.from(topics.entries())\n          .sort(([, a], [, b]) => b - a)\n          .slice(0, 10);\n\n        for (const [topic, count] of sortedCategoryTopics) {\n          if (count >= 2) {\n            const growthRate = this.calculateGrowthRate(topic, count);\n            \n            const trendingRecord: InsertTrendingRecord = {\n              date: today,\n              topic,\n              count,\n              category: category as any,\n              growthRate,\n            };\n\n            await storage.createTrendingRecord(trendingRecord);\n          }\n        }\n      }\n\n      console.log(`Updated trending topics: ${sortedKeywords.length} overall topics`);\n    } catch (error) {\n      console.error('Error updating trending topics:', error);\n    }\n  }\n\n  private extractKeywords(text: string): string[] {\n    // Common tech keywords and phrases\n    const techKeywords = [\n      'ai', 'artificial intelligence', 'machine learning', 'ml', 'deep learning',\n      'openai', 'gpt', 'chatgpt', 'claude', 'llm', 'neural network',\n      'blockchain', 'crypto', 'bitcoin', 'ethereum', 'web3', 'nft',\n      'startup', 'funding', 'venture capital', 'ipo', 'acquisition',\n      'cybersecurity', 'security', 'hack', 'breach', 'vulnerability',\n      'mobile', 'iphone', 'android', 'app', 'ios',\n      'cloud', 'aws', 'azure', 'google cloud', 'saas',\n      'apple', 'google', 'microsoft', 'meta', 'tesla', 'nvidia',\n      'quantum', 'robotics', 'automation', 'iot', 'ar', 'vr',\n      'privacy', 'data', 'algorithm', 'software', 'hardware',\n      'api', 'opensource', 'developer', 'programming'\n    ];\n\n    const words = text.match(/\\b\\w+\\b/g) || [];\n    const keywords: string[] = [];\n\n    // Extract tech keywords\n    for (const keyword of techKeywords) {\n      if (text.includes(keyword)) {\n        keywords.push(keyword);\n      }\n    }\n\n    // Extract company names (capitalized words)\n    const companyPattern = /\\b[A-Z][a-z]+(?:\\s+[A-Z][a-z]+)*\\b/g;\n    const companies = text.match(companyPattern) || [];\n    keywords.push(...companies.map(c => c.toLowerCase()));\n\n    // Remove duplicates and return\n    return [...new Set(keywords)];\n  }\n\n  private calculateGrowthRate(topic: string, currentCount: number): number {\n    // Simple growth rate calculation - in production, compare with historical data\n    // For now, use count as a proxy for growth rate\n    return Math.min(100, (currentCount - 1) * 10);\n  }\n\n  async generateRelatedArticles(): Promise<void> {\n    try {\n      const recentArticles = await storage.getArticles({ \n        timeRange: 'week', \n        limit: 100 \n      });\n\n      for (const article of recentArticles) {\n        if (!article.content) continue;\n\n        // Generate embedding for the article\n        const embedding = await aiService.generateEmbedding(\n          article.title + '\\n' + (article.content || article.snippet || '')\n        );\n\n        if (embedding.length > 0) {\n          // Update article with embedding\n          await storage.updateArticle(article.id, {\n            embedding: JSON.stringify(embedding),\n          });\n\n          // Find similar articles (simplified similarity check)\n          const potentialRelated = recentArticles.filter(other => \n            other.id !== article.id && \n            other.category === article.category\n          );\n\n          // For now, use category matching - in production, use embedding similarity\n          for (const related of potentialRelated.slice(0, 5)) {\n            const similarityScore = this.calculateSimpleSimilarity(article, related);\n            \n            if (similarityScore > 0.3) {\n              await storage.createRelatedArticle(article.id, related.id, similarityScore);\n            }\n          }\n        }\n      }\n\n      console.log('Generated related articles');\n    } catch (error) {\n      console.error('Error generating related articles:', error);\n    }\n  }\n\n  private calculateSimpleSimilarity(article1: any, article2: any): number {\n    // Simple similarity based on common words in titles\n    const words1 = new Set(article1.title.toLowerCase().split(/\\s+/));\n    const words2 = new Set(article2.title.toLowerCase().split(/\\s+/));\n    \n    const intersection = new Set([...words1].filter(x => words2.has(x)));\n    const union = new Set([...words1, ...words2]);\n    \n    return intersection.size / union.size;\n  }\n\n  async startPeriodicUpdate(): Promise<void> {\n    // Initial processing\n    await this.processNewArticles();\n    \n    // Set up periodic updates\n    setInterval(async () => {\n      try {\n        await this.processNewArticles();\n      } catch (error) {\n        console.error('Error in periodic update:', error);\n      }\n    }, 5 * 60 * 1000); // Every 5 minutes\n\n    // Generate related articles every hour\n    setInterval(async () => {\n      try {\n        await this.generateRelatedArticles();\n      } catch (error) {\n        console.error('Error generating related articles:', error);\n      }\n    }, 60 * 60 * 1000); // Every hour\n  }\n}\n\nexport const newsService = new NewsService();\n","size_bytes":8603},"server/services/rssService.ts":{"content":"import { InsertArticle, InsertSource } from \"@shared/schema\";\nimport { storage } from \"../storage\";\n\ninterface RSSItem {\n  title: string;\n  link: string;\n  description?: string;\n  pubDate?: string;\n  content?: string;\n  guid?: string;\n}\n\ninterface RSSFeed {\n  title: string;\n  items: RSSItem[];\n}\n\nexport class RSSService {\n  private async fetchRSS(url: string): Promise<RSSFeed> {\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to fetch RSS: ${response.statusText}`);\n      }\n      \n      const xmlText = await response.text();\n      return this.parseRSS(xmlText);\n    } catch (error) {\n      console.error(`Error fetching RSS from ${url}:`, error);\n      throw error;\n    }\n  }\n\n  private parseRSS(xmlText: string): RSSFeed {\n    // Basic RSS parsing - in production, use a proper XML parser\n    const titleMatch = xmlText.match(/<title><!\\[CDATA\\[(.*?)\\]\\]><\\/title>|<title>(.*?)<\\/title>/i);\n    const title = titleMatch ? (titleMatch[1] || titleMatch[2]) : 'Unknown Feed';\n\n    const items: RSSItem[] = [];\n    const itemRegex = /<item>(.*?)<\\/item>/gis;\n    let itemMatch;\n\n    while ((itemMatch = itemRegex.exec(xmlText)) !== null) {\n      const itemContent = itemMatch[1];\n      \n      const itemTitleMatch = itemContent.match(/<title><!\\[CDATA\\[(.*?)\\]\\]><\\/title>|<title>(.*?)<\\/title>/i);\n      const itemTitle = itemTitleMatch ? (itemTitleMatch[1] || itemTitleMatch[2]) : '';\n\n      const linkMatch = itemContent.match(/<link>(.*?)<\\/link>/i);\n      const link = linkMatch ? linkMatch[1].trim() : '';\n\n      const descMatch = itemContent.match(/<description><!\\[CDATA\\[(.*?)\\]\\]><\\/description>|<description>(.*?)<\\/description>/i);\n      const description = descMatch ? (descMatch[1] || descMatch[2]) : '';\n\n      const pubDateMatch = itemContent.match(/<pubDate>(.*?)<\\/pubDate>/i);\n      const pubDate = pubDateMatch ? pubDateMatch[1] : '';\n\n      const guidMatch = itemContent.match(/<guid[^>]*>(.*?)<\\/guid>/i);\n      const guid = guidMatch ? guidMatch[1] : '';\n\n      if (itemTitle && link) {\n        items.push({\n          title: this.cleanHTML(itemTitle),\n          link: link,\n          description: this.cleanHTML(description),\n          pubDate: pubDate,\n          guid: guid,\n          content: this.cleanHTML(description),\n        });\n      }\n    }\n\n    return { title, items };\n  }\n\n  private cleanHTML(html: string): string {\n    if (!html) return '';\n    \n    return html\n      .replace(/<[^>]*>/g, '')\n      .replace(/&quot;/g, '\"')\n      .replace(/&amp;/g, '&')\n      .replace(/&lt;/g, '<')\n      .replace(/&gt;/g, '>')\n      .replace(/&nbsp;/g, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n  }\n\n  private categorizeArticle(title: string, content: string): string {\n    const text = (title + ' ' + content).toLowerCase();\n    \n    if (text.includes('ai') || text.includes('artificial intelligence') || text.includes('machine learning') || text.includes('ml') || text.includes('gpt') || text.includes('neural') || text.includes('openai')) {\n      return 'ai_ml';\n    }\n    \n    if (text.includes('startup') || text.includes('funding') || text.includes('venture') || text.includes('investment') || text.includes('y combinator')) {\n      return 'startups';\n    }\n    \n    if (text.includes('security') || text.includes('cyber') || text.includes('hack') || text.includes('vulnerability') || text.includes('breach') || text.includes('malware')) {\n      return 'cybersecurity';\n    }\n    \n    if (text.includes('mobile') || text.includes('iphone') || text.includes('android') || text.includes('app') || text.includes('smartphone')) {\n      return 'mobile';\n    }\n    \n    if (text.includes('web3') || text.includes('blockchain') || text.includes('crypto') || text.includes('bitcoin') || text.includes('ethereum') || text.includes('nft')) {\n      return 'web3';\n    }\n    \n    return 'others';\n  }\n\n  private createSnippet(content: string): string {\n    if (!content) return '';\n    \n    const cleanContent = this.cleanHTML(content);\n    return cleanContent.length > 200 \n      ? cleanContent.substring(0, 200).trim() + '...'\n      : cleanContent;\n  }\n\n  async fetchAndStoreArticles(sourceId: string, rssUrl: string): Promise<number> {\n    try {\n      console.log(`Fetching RSS from: ${rssUrl}`);\n      const feed = await this.fetchRSS(rssUrl);\n      let newArticlesCount = 0;\n\n      for (const item of feed.items) {\n        try {\n          // Check if article already exists\n          const existingArticles = await storage.getArticles({ search: item.title, limit: 1 });\n          if (existingArticles.length > 0) {\n            continue; // Skip if already exists\n          }\n\n          const publishedAt = item.pubDate ? new Date(item.pubDate) : new Date();\n          const category = this.categorizeArticle(item.title, item.description || '');\n          const snippet = this.createSnippet(item.description || '');\n\n          const articleData: InsertArticle = {\n            title: item.title,\n            url: item.link,\n            content: item.content || item.description || '',\n            snippet: snippet,\n            sourceId: sourceId,\n            publishedAt: publishedAt,\n            category: category as any,\n            fetchedAt: new Date(),\n          };\n\n          await storage.createArticle(articleData);\n          newArticlesCount++;\n        } catch (error) {\n          console.error(`Error saving article \"${item.title}\":`, error);\n        }\n      }\n\n      // Update source last fetch time\n      await storage.updateSourceLastFetch(sourceId);\n      \n      console.log(`Fetched ${newArticlesCount} new articles from ${rssUrl}`);\n      return newArticlesCount;\n    } catch (error) {\n      console.error(`Error in fetchAndStoreArticles for ${rssUrl}:`, error);\n      return 0;\n    }\n  }\n\n  async initializeDefaultSources(): Promise<void> {\n    const defaultSources = [\n      {\n        name: 'TechCrunch',\n        url: 'https://techcrunch.com',\n        rssUrl: 'https://techcrunch.com/feed/',\n        isActive: true,\n        fetchInterval: 300,\n      },\n      {\n        name: 'The Verge',\n        url: 'https://theverge.com',\n        rssUrl: 'https://www.theverge.com/rss/index.xml',\n        isActive: true,\n        fetchInterval: 300,\n      },\n      {\n        name: 'Hacker News',\n        url: 'https://news.ycombinator.com',\n        rssUrl: 'https://news.ycombinator.com/rss',\n        isActive: true,\n        fetchInterval: 600,\n      },\n      {\n        name: 'Ars Technica',\n        url: 'https://arstechnica.com',\n        rssUrl: 'https://feeds.arstechnica.com/arstechnica/index',\n        isActive: true,\n        fetchInterval: 300,\n      },\n    ];\n\n    const existingSources = await storage.getSources();\n    \n    for (const sourceData of defaultSources) {\n      const exists = existingSources.find(s => s.name === sourceData.name);\n      if (!exists) {\n        await storage.createSource(sourceData);\n        console.log(`Created default source: ${sourceData.name}`);\n      }\n    }\n  }\n\n  async fetchAllSources(): Promise<void> {\n    const sources = await storage.getSources();\n    \n    for (const source of sources) {\n      if (!source.rssUrl || !source.isActive) continue;\n      \n      try {\n        const newArticles = await this.fetchAndStoreArticles(source.id, source.rssUrl);\n        console.log(`Source ${source.name}: ${newArticles} new articles`);\n      } catch (error) {\n        console.error(`Error fetching from ${source.name}:`, error);\n      }\n    }\n  }\n}\n\nexport const rssService = new RSSService();\n","size_bytes":7527},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useTheme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setThemeState] = useState<Theme>('light');\n\n  useEffect(() => {\n    // Load saved theme or detect system preference\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n    const initialTheme = savedTheme || systemTheme;\n    \n    setThemeState(initialTheme);\n    document.documentElement.classList.toggle('dark', initialTheme === 'dark');\n  }, []);\n\n  const setTheme = (newTheme: Theme) => {\n    setThemeState(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\n  };\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (!context) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1484},"client/src/hooks/useWebSocket.tsx":{"content":"import { useEffect, useRef, useState } from 'react';\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  message?: string;\n}\n\nexport function useWebSocket() {\n  const [isConnected, setIsConnected] = useState(false);\n  const [lastMessage, setLastMessage] = useState<WebSocketMessage | null>(null);\n  const wsRef = useRef<WebSocket | null>(null);\n\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n\n    const connect = () => {\n      try {\n        wsRef.current = new WebSocket(wsUrl);\n\n        wsRef.current.onopen = () => {\n          console.log('WebSocket connected');\n          setIsConnected(true);\n        };\n\n        wsRef.current.onmessage = (event) => {\n          try {\n            const message = JSON.parse(event.data);\n            setLastMessage(message);\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n\n        wsRef.current.onclose = () => {\n          console.log('WebSocket disconnected');\n          setIsConnected(false);\n          \n          // Attempt to reconnect after 3 seconds\n          setTimeout(connect, 3000);\n        };\n\n        wsRef.current.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          setIsConnected(false);\n        };\n      } catch (error) {\n        console.error('Error creating WebSocket connection:', error);\n        setTimeout(connect, 3000);\n      }\n    };\n\n    connect();\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, []);\n\n  const sendMessage = (message: any) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected');\n    }\n  };\n\n  return {\n    isConnected,\n    lastMessage,\n    sendMessage,\n  };\n}\n","size_bytes":1951},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n\nexport function redirectToLogin() {\n  setTimeout(() => {\n    window.location.href = \"/api/auth/google\";\n  }, 500);\n}","size_bytes":233},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle query parameters properly\n    let url = queryKey[0] as string;\n    \n    if (queryKey.length > 1) {\n      const params = queryKey[1] as Record<string, any>;\n      const searchParams = new URLSearchParams();\n      \n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          searchParams.append(key, String(value));\n        }\n      });\n      \n      const queryString = searchParams.toString();\n      if (queryString) {\n        url += `?${queryString}`;\n      }\n    }\n\n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1914},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\nimport Header from \"@/components/layout/header\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport NewsFeed from \"@/components/news/news-feed\";\nimport AIChat from \"@/components/chat/ai-chat\";\nimport MobileChat from \"@/components/chat/mobile-chat\";\nimport ArticleModal from \"@/components/news/article-modal\";\nimport { SearchFilters, ArticleWithSource } from \"@/types/news\";\n\nexport default function Home() {\n  const { user } = useAuth();\n  const { isConnected } = useWebSocket();\n  \n  const [filters, setFilters] = useState<SearchFilters>({\n    category: 'all',\n    timeRange: 'today',\n    page: 1,\n    limit: 20,\n  });\n  \n  const [selectedArticle, setSelectedArticle] = useState<ArticleWithSource | null>(null);\n  const [showMobileChat, setShowMobileChat] = useState(false);\n  const [showArticleModal, setShowArticleModal] = useState(false);\n\n  const { data: articles = [], isLoading: articlesLoading } = useQuery({\n    queryKey: ['/api/articles', filters],\n    retry: 1,\n  }) as { data: ArticleWithSource[], isLoading: boolean };\n\n  const handleFilterChange = (newFilters: Partial<SearchFilters>) => {\n    setFilters(prev => ({ ...prev, ...newFilters, page: 1 }));\n  };\n\n  const handleArticleSelect = (article: ArticleWithSource) => {\n    setSelectedArticle(article);\n    setShowArticleModal(true);\n  };\n\n  const handleCloseArticle = () => {\n    setShowArticleModal(false);\n    setSelectedArticle(null);\n  };\n\n  const handleChatToggle = () => {\n    setShowMobileChat(!showMobileChat);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <Header \n        onSearch={(query) => handleFilterChange({ search: query })}\n        isConnected={isConnected}\n      />\n\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8 py-3 sm:py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-3 sm:gap-6\">\n          {/* Sidebar - Hidden on mobile, shows as collapsible filters */}\n          <aside className=\"lg:col-span-1 hidden md:block\">\n            <Sidebar\n              filters={filters}\n              onFilterChange={handleFilterChange}\n            />\n          </aside>\n\n          {/* Main Content */}\n          <main className=\"lg:col-span-2 md:col-span-1 col-span-1\">\n            {/* Mobile Category Filter */}\n            <div className=\"md:hidden mb-4\">\n              <div className=\"flex overflow-x-auto space-x-2 pb-2 scrollbar-hide\">\n                {Object.entries({\n                  all: 'All',\n                  ai_ml: 'AI/ML',\n                  startups: 'Startups',\n                  cybersecurity: 'Security',\n                  mobile: 'Mobile',\n                  web3: 'Web3',\n                  others: 'Others'\n                }).map(([key, label]) => (\n                  <button\n                    key={key}\n                    onClick={() => handleFilterChange({ category: key })}\n                    className={`whitespace-nowrap px-3 py-1.5 text-sm rounded-full border transition-colors ${\n                      filters.category === key\n                        ? 'bg-tech-blue text-white border-tech-blue'\n                        : 'bg-background text-muted-foreground border-border hover:border-tech-blue/50'\n                    }`}\n                  >\n                    {label}\n                  </button>\n                ))}\n              </div>\n            </div>\n\n            <NewsFeed\n              articles={articles}\n              isLoading={articlesLoading}\n              onArticleSelect={handleArticleSelect}\n              onLoadMore={() => {\n                const nextPage = (filters.page || 1) + 1;\n                setFilters(prev => ({ ...prev, page: nextPage }));\n              }}\n              filters={filters}\n            />\n          </main>\n\n          {/* Desktop AI Chat */}\n          <aside className=\"lg:col-span-1 hidden lg:block\">\n            <AIChat selectedArticle={selectedArticle} />\n          </aside>\n        </div>\n      </div>\n\n      {/* Mobile Chat */}\n      <MobileChat\n        isOpen={showMobileChat}\n        onClose={() => setShowMobileChat(false)}\n        selectedArticle={selectedArticle}\n      />\n\n      {/* Floating Mobile Chat Button */}\n      <button\n        onClick={handleChatToggle}\n        className=\"lg:hidden fixed bottom-4 right-4 w-12 h-12 sm:w-14 sm:h-14 bg-tech-blue text-white rounded-full shadow-lg hover:bg-blue-600 transition-colors flex items-center justify-center z-40\"\n        data-testid=\"button-mobile-chat\"\n        aria-label=\"Open AI chat\"\n      >\n        <i className=\"fas fa-robot text-base sm:text-lg\"></i>\n      </button>\n\n      {/* Article Modal */}\n      <ArticleModal\n        article={selectedArticle}\n        isOpen={showArticleModal}\n        onClose={handleCloseArticle}\n        onChatOpen={(article) => {\n          setSelectedArticle(article);\n          setShowMobileChat(true);\n        }}\n      />\n    </div>\n  );\n}\n","size_bytes":5052},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useTheme } from \"@/hooks/useTheme\";\n\nexport default function Landing() {\n  const { theme, toggleTheme } = useTheme();\n\n  const handleGetStarted = () => {\n    window.location.href = \"/app\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-accent/20 to-background\">\n      {/* Header */}\n      <header className=\"border-b border-border bg-card/80 backdrop-blur-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-tech-blue rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-bolt text-white text-lg\"></i>\n              </div>\n              <h1 className=\"text-xl font-bold text-foreground\">TechPulse</h1>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={toggleTheme}\n                className=\"rounded-lg\"\n                data-testid=\"button-theme-toggle\"\n                aria-label=\"Toggle dark mode\"\n              >\n                {theme === 'dark' ? (\n                  <i className=\"fas fa-sun text-yellow-400\"></i>\n                ) : (\n                  <i className=\"fas fa-moon text-slate-600\"></i>\n                )}\n              </Button>\n              \n              <Button onClick={handleGetStarted} data-testid=\"button-get-started\">\n                Get Started\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"space-y-8\">\n            <div className=\"space-y-4\">\n              <h1 className=\"text-4xl md:text-6xl font-bold text-foreground\">\n                AI-Powered Tech News &{' '}\n                <span className=\"bg-gradient-to-r from-tech-blue to-tech-green bg-clip-text text-transparent\">\n                  Discussion Platform\n                </span>\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n                Stay ahead of the tech curve with intelligent news aggregation, AI-powered summaries, \n                and context-aware discussions. Your personalized gateway to what matters in technology.\n              </p>\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <Button size=\"lg\" onClick={handleGetStarted} className=\"px-8 py-3\" data-testid=\"button-hero-get-started\">\n                <i className=\"fas fa-rocket mr-2\"></i>\n                Start Exploring\n              </Button>\n              <Button variant=\"outline\" size=\"lg\" className=\"px-8 py-3\" data-testid=\"button-learn-more\">\n                <i className=\"fas fa-play mr-2\"></i>\n                Learn More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8 bg-muted/30\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n              Why TechPulse?\n            </h2>\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n              Combining the best of tech journalism with cutting-edge AI to deliver \n              a superior news experience.\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            <Card className=\"border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-tech-blue/10 rounded-lg flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-robot text-tech-blue text-xl\"></i>\n                </div>\n                <CardTitle>AI-Powered Chat</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Chat with articles using advanced AI. Get summaries, ask questions, \n                  and discover insights you might have missed.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-tech-green/10 rounded-lg flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-chart-trending-up text-tech-green text-xl\"></i>\n                </div>\n                <CardTitle>Trending Intelligence</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Real-time analysis of trending topics, sentiment tracking, \n                  and predictive insights about tech developments.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-purple-500/10 rounded-lg flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-filter text-purple-500 text-xl\"></i>\n                </div>\n                <CardTitle>Smart Filtering</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Category-based filtering, personalized recommendations, \n                  and intelligent content curation tailored to your interests.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-orange-500/10 rounded-lg flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-rss text-orange-500 text-xl\"></i>\n                </div>\n                <CardTitle>Multi-Source Aggregation</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Curated content from TechCrunch, The Verge, Hacker News, \n                  and other top tech publications in one place.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-pink-500/10 rounded-lg flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-bookmark text-pink-500 text-xl\"></i>\n                </div>\n                <CardTitle>Personal Library</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Save articles, maintain reading lists, and access your \n                  bookmarked content offline whenever you need it.\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"border-border hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"w-12 h-12 bg-cyan-500/10 rounded-lg flex items-center justify-center mb-4\">\n                  <i className=\"fas fa-mobile-alt text-cyan-500 text-xl\"></i>\n                </div>\n                <CardTitle>Mobile-First Design</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Optimized for all devices with a responsive design that \n                  works seamlessly on desktop, tablet, and mobile.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <Card className=\"border-border bg-gradient-to-r from-tech-blue/5 to-tech-green/5\">\n            <CardContent className=\"p-12\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-foreground mb-4\">\n                Ready to Transform Your Tech News Experience?\n              </h2>\n              <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n                Join thousands of tech professionals who stay informed with AI-powered insights.\n              </p>\n              <Button size=\"lg\" onClick={handleGetStarted} className=\"px-8 py-3\" data-testid=\"button-cta-get-started\">\n                <i className=\"fas fa-bolt mr-2\"></i>\n                Get Started Now\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border bg-card/50 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-3 mb-4 md:mb-0\">\n              <div className=\"w-8 h-8 bg-tech-blue rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-bolt text-white text-sm\"></i>\n              </div>\n              <span className=\"font-semibold text-foreground\">TechPulse</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-6 text-sm text-muted-foreground\">\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-about\">\n                About\n              </a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-privacy\">\n                Privacy\n              </a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-terms\">\n                Terms\n              </a>\n              <a href=\"#\" className=\"hover:text-foreground transition-colors\" data-testid=\"link-contact\">\n                Contact\n              </a>\n            </div>\n          </div>\n          \n          <div className=\"mt-8 pt-8 border-t border-border text-center text-sm text-muted-foreground\">\n            <p>&copy; 2024 TechPulse. All rights reserved. Powered by AI for a smarter tech news experience.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":10742},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/news.ts":{"content":"export interface User {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  preferences?: Record<string, any>;\n  createdAt?: string;\n  updatedAt?: string;\n}\n\nexport interface Source {\n  id: string;\n  name: string;\n  url: string;\n  rssUrl?: string;\n  isActive: boolean;\n  fetchInterval: number;\n  lastFetchAt?: string;\n  createdAt: string;\n}\n\nexport interface Article {\n  id: string;\n  title: string;\n  url: string;\n  content?: string;\n  snippet?: string;\n  sourceId?: string;\n  publishedAt?: string;\n  fetchedAt: string;\n  category: 'ai_ml' | 'startups' | 'cybersecurity' | 'mobile' | 'web3' | 'others';\n  thumbnail?: string;\n  sentiment?: 'positive' | 'negative' | 'neutral';\n  sentimentScore?: number;\n  viewCount: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface ArticleWithSource extends Article {\n  source?: Source | null;\n  isBookmarked?: boolean;\n  relatedArticles?: ArticleWithSource[];\n}\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: number;\n}\n\nexport interface TrendingTopic {\n  id: string;\n  date: string;\n  topic: string;\n  count: number;\n  category?: string;\n  growthRate?: number;\n  createdAt: string;\n}\n\nexport interface SearchFilters {\n  category?: string;\n  timeRange?: 'today' | 'week' | 'month';\n  search?: string;\n  page?: number;\n  limit?: number;\n}\n\nexport interface CategoryCount {\n  [key: string]: number;\n}\n\nexport const CATEGORIES = {\n  all: 'All News',\n  ai_ml: 'AI/ML',\n  startups: 'Startups',\n  cybersecurity: 'Cybersecurity',\n  mobile: 'Mobile',\n  web3: 'Web3',\n  others: 'Others',\n} as const;\n\nexport const TIME_RANGES = {\n  today: 'Today',\n  week: 'This Week',\n  month: 'This Month',\n} as const;\n\nexport const SENTIMENT_COLORS = {\n  positive: 'text-green-600',\n  negative: 'text-red-600',\n  neutral: 'text-gray-600',\n} as const;\n\nexport const SENTIMENT_ICONS = {\n  positive: 'fas fa-arrow-up',\n  negative: 'fas fa-arrow-down',\n  neutral: 'fas fa-minus',\n} as const;\n\nexport const CATEGORY_COLORS = {\n  ai_ml: 'bg-emerald-100 dark:bg-emerald-900 text-emerald-800 dark:text-emerald-200',\n  startups: 'bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200',\n  cybersecurity: 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200',\n  mobile: 'bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200',\n  web3: 'bg-yellow-100 dark:bg-yellow-900 text-yellow-800 dark:text-yellow-200',\n  others: 'bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200',\n} as const;\n","size_bytes":2557},"client/src/components/chat/ai-chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ArticleWithSource, ChatMessage } from \"@/types/news\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface AIChatProps {\n  selectedArticle: ArticleWithSource | null;\n}\n\nexport default function AIChat({ selectedArticle }: AIChatProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [message, setMessage] = useState(\"\");\n  const [isMinimized, setIsMinimized] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: chatHistory = [], refetch: refetchHistory } = useQuery({\n    queryKey: ['/api/chat', selectedArticle?.id, 'history'],\n    enabled: !!selectedArticle?.id,\n    retry: 1,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageText: string) => {\n      if (!selectedArticle) throw new Error('No article selected');\n      \n      const response = await apiRequest('POST', '/api/chat/message', {\n        articleId: selectedArticle.id,\n        message: messageText,\n      });\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      refetchHistory();\n      queryClient.invalidateQueries({ queryKey: ['/api/chat'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const summarizeMutation = useMutation({\n    mutationFn: async (mode: 'short' | 'medium' | 'long') => {\n      if (!selectedArticle) throw new Error('No article selected');\n      \n      const response = await apiRequest('POST', '/api/chat/summarize', {\n        articleId: selectedArticle.id,\n        mode,\n      });\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      refetchHistory();\n      queryClient.invalidateQueries({ queryKey: ['/api/chat'] });\n      \n      toast({\n        title: \"Summary generated\",\n        description: \"AI has summarized the article for you.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to generate summary. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatHistory]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || !selectedArticle) return;\n    \n    sendMessageMutation.mutate(message.trim());\n  };\n\n  const handleQuickPrompt = (prompt: string) => {\n    if (!selectedArticle) return;\n    \n    let fullPrompt = \"\";\n    switch (prompt) {\n      case 'summarize':\n        summarizeMutation.mutate('medium');\n        return;\n      case 'explain':\n        fullPrompt = \"Can you explain the key concepts mentioned in this article in simple terms?\";\n        break;\n      case 'impact':\n        fullPrompt = \"What is the potential impact of this news on the tech industry?\";\n        break;\n      default:\n        fullPrompt = prompt;\n    }\n    \n    sendMessageMutation.mutate(fullPrompt);\n  };\n\n  const formatMessageTime = (timestamp: number) => {\n    try {\n      return formatDistanceToNow(new Date(timestamp), { addSuffix: true });\n    } catch {\n      return 'Unknown time';\n    }\n  };\n\n  if (isMinimized) {\n    return (\n      <Card className=\"h-fit sticky top-24\">\n        <CardHeader className=\"pb-2\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-sm flex items-center\">\n              <i className=\"fas fa-robot mr-2 text-tech-blue\"></i>\n              AI Assistant\n            </CardTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setIsMinimized(false)}\n              className=\"h-6 w-6\"\n              data-testid=\"button-expand-chat\"\n              aria-label=\"Expand chat\"\n            >\n              <i className=\"fas fa-expand-alt text-xs\"></i>\n            </Button>\n          </div>\n        </CardHeader>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"h-fit sticky top-24\" data-testid=\"chat-desktop\">\n      {/* Chat Header */}\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <i className=\"fas fa-robot mr-2 text-tech-blue\"></i>\n            AI Assistant\n          </CardTitle>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsMinimized(true)}\n            className=\"h-6 w-6\"\n            data-testid=\"button-minimize-chat\"\n            aria-label=\"Minimize chat\"\n          >\n            <i className=\"fas fa-minus text-xs\"></i>\n          </Button>\n        </div>\n        \n        <p className=\"text-sm text-muted-foreground\">\n          {selectedArticle ? 'Ask about this article or tech topics' : 'Select an article to start chatting'}\n        </p>\n        \n        {selectedArticle && (\n          <div className=\"mt-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {selectedArticle.source?.name || 'Unknown Source'}\n            </Badge>\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent className=\"p-0\">\n        {/* Chat Messages */}\n        <ScrollArea className=\"h-80 px-4\" data-testid=\"chat-messages\">\n          {!selectedArticle ? (\n            <div className=\"flex items-center justify-center h-full text-center\">\n              <div className=\"space-y-2\">\n                <i className=\"fas fa-newspaper text-muted-foreground text-2xl\"></i>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select an article to start an AI conversation\n                </p>\n              </div>\n            </div>\n          ) : chatHistory.length === 0 ? (\n            <div className=\"space-y-4\">\n              {/* Welcome Message */}\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-tech-blue rounded-full flex items-center justify-center flex-shrink-0\">\n                  <i className=\"fas fa-robot text-white text-sm\"></i>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"bg-muted rounded-lg p-3\">\n                    <p className=\"text-sm\">\n                      👋 Hi! I'm ready to help you understand this article. \n                      You can ask me to summarize it, explain concepts, or discuss its implications.\n                    </p>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground mt-1 block\">\n                    Just now\n                  </span>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {chatHistory.map((msg: ChatMessage, index: number) => (\n                <div\n                  key={index}\n                  className={`flex items-start space-x-3 ${\n                    msg.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''\n                  }`}\n                  data-testid={`message-${index}`}\n                >\n                  <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n                    {msg.role === 'assistant' ? (\n                      <div className=\"w-8 h-8 bg-tech-blue rounded-full flex items-center justify-center\">\n                        <i className=\"fas fa-robot text-white text-sm\"></i>\n                      </div>\n                    ) : (\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                        <i className=\"fas fa-user text-primary-foreground text-sm\"></i>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div\n                      className={`rounded-lg p-3 max-w-sm ${\n                        msg.role === 'user'\n                          ? 'bg-tech-blue text-white ml-auto'\n                          : 'bg-muted'\n                      }`}\n                    >\n                      <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n                    </div>\n                    <span\n                      className={`text-xs text-muted-foreground mt-1 block ${\n                        msg.role === 'user' ? 'text-right' : ''\n                      }`}\n                    >\n                      {formatMessageTime(msg.timestamp)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n              \n              {sendMessageMutation.isPending && (\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-tech-blue rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-robot text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-muted rounded-lg p-3 max-w-sm\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </ScrollArea>\n\n        {/* Chat Input */}\n        <div className=\"p-4 border-t border-border\">\n          <form onSubmit={handleSendMessage} className=\"space-y-3\">\n            <div className=\"flex space-x-2\">\n              <Input\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder={selectedArticle ? \"Ask about this article...\" : \"Select an article first\"}\n                disabled={!selectedArticle || sendMessageMutation.isPending}\n                className=\"flex-1 text-sm\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={!message.trim() || !selectedArticle || sendMessageMutation.isPending}\n                className=\"bg-tech-blue hover:bg-blue-600\"\n                data-testid=\"button-send-message\"\n                aria-label=\"Send message\"\n              >\n                {sendMessageMutation.isPending ? (\n                  <i className=\"fas fa-spinner animate-spin\"></i>\n                ) : (\n                  <i className=\"fas fa-paper-plane\"></i>\n                )}\n              </Button>\n            </div>\n            \n            {selectedArticle && (\n              <div className=\"flex flex-wrap gap-1\">\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => handleQuickPrompt('summarize')}\n                  disabled={summarizeMutation.isPending}\n                  className=\"text-xs px-2 py-1 h-auto\"\n                  data-testid=\"button-quick-summarize\"\n                >\n                  {summarizeMutation.isPending ? (\n                    <i className=\"fas fa-spinner animate-spin mr-1\"></i>\n                  ) : null}\n                  Summarize\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => handleQuickPrompt('explain')}\n                  disabled={sendMessageMutation.isPending}\n                  className=\"text-xs px-2 py-1 h-auto\"\n                  data-testid=\"button-quick-explain\"\n                >\n                  Explain\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => handleQuickPrompt('impact')}\n                  disabled={sendMessageMutation.isPending}\n                  className=\"text-xs px-2 py-1 h-auto\"\n                  data-testid=\"button-quick-impact\"\n                >\n                  Impact?\n                </Button>\n              </div>\n            )}\n          </form>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":13709},"client/src/components/chat/mobile-chat.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ArticleWithSource, ChatMessage } from \"@/types/news\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface MobileChatProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedArticle: ArticleWithSource | null;\n}\n\nexport default function MobileChat({ isOpen, onClose, selectedArticle }: MobileChatProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [message, setMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const { data: chatHistory = [], refetch: refetchHistory } = useQuery({\n    queryKey: ['/api/chat', selectedArticle?.id, 'history'],\n    enabled: !!selectedArticle?.id && isOpen,\n    retry: 1,\n  });\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageText: string) => {\n      if (!selectedArticle) throw new Error('No article selected');\n      \n      const response = await apiRequest('POST', '/api/chat/message', {\n        articleId: selectedArticle.id,\n        message: messageText,\n      });\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      setMessage(\"\");\n      refetchHistory();\n      queryClient.invalidateQueries({ queryKey: ['/api/chat'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const summarizeMutation = useMutation({\n    mutationFn: async (mode: 'short' | 'medium' | 'long') => {\n      if (!selectedArticle) throw new Error('No article selected');\n      \n      const response = await apiRequest('POST', '/api/chat/summarize', {\n        articleId: selectedArticle.id,\n        mode,\n      });\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      refetchHistory();\n      queryClient.invalidateQueries({ queryKey: ['/api/chat'] });\n      \n      toast({\n        title: \"Summary generated\",\n        description: \"AI has summarized the article for you.\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: \"Failed to generate summary. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (isOpen) {\n      document.body.style.overflow = 'hidden';\n      messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n    } else {\n      document.body.style.overflow = 'unset';\n    }\n\n    return () => {\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, chatHistory]);\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || !selectedArticle) return;\n    \n    sendMessageMutation.mutate(message.trim());\n  };\n\n  const handleQuickPrompt = (prompt: string) => {\n    if (!selectedArticle) return;\n    \n    let fullPrompt = \"\";\n    switch (prompt) {\n      case 'summarize':\n        summarizeMutation.mutate('medium');\n        return;\n      case 'explain':\n        fullPrompt = \"Can you explain the key concepts mentioned in this article in simple terms?\";\n        break;\n      case 'impact':\n        fullPrompt = \"What is the potential impact of this news on the tech industry?\";\n        break;\n      default:\n        fullPrompt = prompt;\n    }\n    \n    sendMessageMutation.mutate(fullPrompt);\n  };\n\n  const formatMessageTime = (timestamp: number) => {\n    try {\n      return formatDistanceToNow(new Date(timestamp), { addSuffix: true });\n    } catch {\n      return 'Unknown time';\n    }\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"lg:hidden fixed inset-0 bg-black/50 z-50\" data-testid=\"chat-mobile-overlay\">\n      <div className=\"absolute bottom-0 left-0 right-0 bg-card rounded-t-xl max-h-[90vh] flex flex-col\">\n        {/* Mobile Chat Header */}\n        <div className=\"p-4 border-b border-border flex items-center justify-between bg-card rounded-t-xl\">\n          <div className=\"flex-1\">\n            <h3 className=\"font-semibold flex items-center text-foreground\">\n              <i className=\"fas fa-robot mr-2 text-tech-blue\"></i>\n              AI Assistant\n            </h3>\n            {selectedArticle && (\n              <div className=\"flex items-center space-x-2 mt-1\">\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  {selectedArticle.source?.name || 'Unknown Source'}\n                </Badge>\n                <span className=\"text-xs text-muted-foreground\">\n                  {selectedArticle.title.length > 30 \n                    ? `${selectedArticle.title.substring(0, 30)}...`\n                    : selectedArticle.title\n                  }\n                </span>\n              </div>\n            )}\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={onClose}\n            className=\"text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-close-mobile-chat\"\n            aria-label=\"Close chat\"\n          >\n            <i className=\"fas fa-times\"></i>\n          </Button>\n        </div>\n        \n        {/* Mobile Chat Messages */}\n        <ScrollArea className=\"flex-1 p-4 max-h-80\" data-testid=\"chat-mobile-messages\">\n          {!selectedArticle ? (\n            <div className=\"flex items-center justify-center h-32 text-center\">\n              <div className=\"space-y-2\">\n                <i className=\"fas fa-newspaper text-muted-foreground text-2xl\"></i>\n                <p className=\"text-sm text-muted-foreground\">\n                  Select an article to start an AI conversation\n                </p>\n              </div>\n            </div>\n          ) : chatHistory.length === 0 ? (\n            <div className=\"space-y-4\">\n              {/* Welcome Message */}\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-tech-blue rounded-full flex items-center justify-center flex-shrink-0\">\n                  <i className=\"fas fa-robot text-white text-sm\"></i>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"bg-muted rounded-lg p-3\">\n                    <p className=\"text-sm\">\n                      👋 Hi! I'm ready to help you understand this article. \n                      You can ask me to summarize it, explain concepts, or discuss its implications.\n                    </p>\n                  </div>\n                  <span className=\"text-xs text-muted-foreground mt-1 block\">\n                    Just now\n                  </span>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {chatHistory.map((msg: ChatMessage, index: number) => (\n                <div\n                  key={index}\n                  className={`flex items-start space-x-3 ${\n                    msg.role === 'user' ? 'flex-row-reverse space-x-reverse' : ''\n                  }`}\n                  data-testid={`mobile-message-${index}`}\n                >\n                  <div className=\"w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0\">\n                    {msg.role === 'assistant' ? (\n                      <div className=\"w-8 h-8 bg-tech-blue rounded-full flex items-center justify-center\">\n                        <i className=\"fas fa-robot text-white text-sm\"></i>\n                      </div>\n                    ) : (\n                      <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                        <i className=\"fas fa-user text-primary-foreground text-sm\"></i>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex-1\">\n                    <div\n                      className={`rounded-lg p-3 ${\n                        msg.role === 'user'\n                          ? 'bg-tech-blue text-white ml-auto max-w-[80%]'\n                          : 'bg-muted max-w-[80%]'\n                      }`}\n                    >\n                      <p className=\"text-sm whitespace-pre-wrap\">{msg.content}</p>\n                    </div>\n                    <span\n                      className={`text-xs text-muted-foreground mt-1 block ${\n                        msg.role === 'user' ? 'text-right' : ''\n                      }`}\n                    >\n                      {formatMessageTime(msg.timestamp)}\n                    </span>\n                  </div>\n                </div>\n              ))}\n              \n              {sendMessageMutation.isPending && (\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-8 h-8 bg-tech-blue rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-robot text-white text-sm\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"bg-muted rounded-lg p-3 max-w-[80%]\">\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n          <div ref={messagesEndRef} />\n        </ScrollArea>\n        \n        {/* Mobile Chat Input */}\n        <div className=\"p-4 border-t border-border bg-card\">\n          <form onSubmit={handleSendMessage} className=\"space-y-3\">\n            <div className=\"flex space-x-2\">\n              <Input\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder={selectedArticle ? \"Ask about this article...\" : \"Select an article first\"}\n                disabled={!selectedArticle || sendMessageMutation.isPending}\n                className=\"flex-1\"\n                data-testid=\"input-mobile-chat-message\"\n              />\n              <Button\n                type=\"submit\"\n                size=\"icon\"\n                disabled={!message.trim() || !selectedArticle || sendMessageMutation.isPending}\n                className=\"bg-tech-blue hover:bg-blue-600\"\n                data-testid=\"button-mobile-send-message\"\n                aria-label=\"Send message\"\n              >\n                {sendMessageMutation.isPending ? (\n                  <i className=\"fas fa-spinner animate-spin\"></i>\n                ) : (\n                  <i className=\"fas fa-paper-plane\"></i>\n                )}\n              </Button>\n            </div>\n            \n            {selectedArticle && (\n              <div className=\"flex flex-wrap gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => handleQuickPrompt('summarize')}\n                  disabled={summarizeMutation.isPending}\n                  className=\"text-xs px-3 py-2 h-auto\"\n                  data-testid=\"button-mobile-quick-summarize\"\n                >\n                  {summarizeMutation.isPending ? (\n                    <i className=\"fas fa-spinner animate-spin mr-1\"></i>\n                  ) : null}\n                  Summarize\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => handleQuickPrompt('explain')}\n                  disabled={sendMessageMutation.isPending}\n                  className=\"text-xs px-3 py-2 h-auto\"\n                  data-testid=\"button-mobile-quick-explain\"\n                >\n                  Explain\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"secondary\"\n                  size=\"sm\"\n                  onClick={() => handleQuickPrompt('impact')}\n                  disabled={sendMessageMutation.isPending}\n                  className=\"text-xs px-3 py-2 h-auto\"\n                  data-testid=\"button-mobile-quick-impact\"\n                >\n                  Impact?\n                </Button>\n              </div>\n            )}\n          </form>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":13541},"client/src/components/layout/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/hooks/useTheme\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface HeaderProps {\n  onSearch: (query: string) => void;\n  isConnected: boolean;\n}\n\nexport default function Header({ onSearch, isConnected }: HeaderProps) {\n  const { user } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const { data: bookmarks = [] } = useQuery({\n    queryKey: ['/api/bookmarks'],\n    retry: false,\n  }) as { data: any[] };\n\n  const refreshMutation = useMutation({\n    mutationFn: () => apiRequest('POST', '/api/refresh'),\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"News feed refreshed successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/articles'] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to refresh news feed\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(searchQuery);\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  useEffect(() => {\n    const delayedSearch = setTimeout(() => {\n      if (searchQuery.trim()) {\n        onSearch(searchQuery);\n      }\n    }, 300);\n\n    return () => clearTimeout(delayedSearch);\n  }, [searchQuery, onSearch]);\n\n  return (\n    <header className=\"bg-card shadow-sm border-b border-border sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-3 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-14 sm:h-16\">\n          {/* Logo */}\n          <div className=\"flex items-center space-x-2 sm:space-x-3\">\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-tech-blue rounded-lg flex items-center justify-center\">\n              <i className=\"fas fa-bolt text-white text-sm sm:text-lg\"></i>\n            </div>\n            <div className=\"flex flex-col\">\n              <h1 className=\"text-lg sm:text-xl font-bold text-foreground\">TechPulse</h1>\n              {isConnected && (\n                <span className=\"text-xs text-tech-green flex items-center\">\n                  <i className=\"fas fa-circle text-xs mr-1\"></i>\n                  Live\n                </span>\n              )}\n            </div>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-2xl mx-8 hidden md:block\">\n            <form onSubmit={handleSearch} className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search tech news, topics, or ask AI...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"pl-10 pr-4 bg-background border-input\"\n                data-testid=\"input-search\"\n              />\n              <i className=\"fas fa-search absolute left-3 top-3 text-muted-foreground\"></i>\n            </form>\n          </div>\n\n          {/* User Actions */}\n          <div className=\"flex items-center space-x-1 sm:space-x-4\">\n            {/* Theme Toggle - Always visible */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={toggleTheme}\n              className=\"rounded-lg w-8 h-8 sm:w-10 sm:h-10\"\n              data-testid=\"button-theme-toggle\"\n              aria-label=\"Toggle dark mode\"\n            >\n              {theme === 'dark' ? (\n                <i className=\"fas fa-sun text-yellow-400 text-sm\"></i>\n              ) : (\n                <i className=\"fas fa-moon text-muted-foreground text-sm\"></i>\n              )}\n            </Button>\n\n            {/* Refresh Button - Hidden on smallest screens */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => refreshMutation.mutate()}\n              disabled={refreshMutation.isPending}\n              className=\"rounded-lg w-8 h-8 sm:w-10 sm:h-10 hidden xs:flex\"\n              data-testid=\"button-refresh\"\n              aria-label=\"Refresh news feed\"\n            >\n              <i className={`fas fa-sync-alt text-sm ${refreshMutation.isPending ? 'animate-spin' : ''}`}></i>\n            </Button>\n\n            {/* Bookmarks - Hidden on smallest screens */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"rounded-lg relative w-8 h-8 sm:w-10 sm:h-10 hidden sm:flex\"\n              data-testid=\"button-bookmarks\"\n              aria-label=\"View bookmarks\"\n            >\n              <i className=\"fas fa-bookmark text-muted-foreground text-sm\"></i>\n              {bookmarks.length > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-tech-blue text-white text-xs rounded-full w-4 h-4 flex items-center justify-center\" data-testid=\"text-bookmark-count\">\n                  {bookmarks.length}\n                </span>\n              )}\n            </Button>\n\n            {/* User Profile - Simplified on mobile */}\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-7 h-7 sm:w-8 sm:h-8 rounded-full bg-muted flex items-center justify-center\">\n                <i className=\"fas fa-user text-muted-foreground text-xs\"></i>\n              </div>\n              \n              <div className=\"hidden md:flex flex-col\">\n                <span className=\"text-sm font-medium text-foreground\" data-testid=\"text-user-name\">\n                  Guest User\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Search */}\n        <div className=\"md:hidden pb-3\">\n          <form onSubmit={handleSearch} className=\"relative\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search tech news...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10 pr-4 bg-background border-input text-sm h-10\"\n              data-testid=\"input-search-mobile\"\n            />\n            <i className=\"fas fa-search absolute left-3 top-3 text-muted-foreground text-sm\"></i>\n          </form>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":6928},"client/src/components/layout/sidebar.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport TrendingDashboard from \"@/components/trending/trending-dashboard\";\nimport { SearchFilters, CATEGORIES, TIME_RANGES } from \"@/types/news\";\n\ninterface SidebarProps {\n  filters: SearchFilters;\n  onFilterChange: (filters: Partial<SearchFilters>) => void;\n}\n\nexport default function Sidebar({ filters, onFilterChange }: SidebarProps) {\n  const { data: articles = [] } = useQuery({\n    queryKey: ['/api/articles', { limit: 1000 }], // Get all for counting\n    retry: 1,\n  }) as { data: any[] };\n\n  // Calculate category counts\n  const categoryCounts = articles.reduce((acc: Record<string, number>, article: any) => {\n    acc[article.category] = (acc[article.category] || 0) + 1;\n    acc.all = (acc.all || 0) + 1;\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Category Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg\">\n            <i className=\"fas fa-filter mr-2 text-tech-blue\"></i>\n            Categories\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          {Object.entries(CATEGORIES).map(([key, label]) => (\n            <Button\n              key={key}\n              variant={filters.category === key ? \"default\" : \"ghost\"}\n              className=\"w-full justify-between\"\n              onClick={() => onFilterChange({ category: key })}\n              data-testid={`button-category-${key}`}\n            >\n              <span>{label}</span>\n              <Badge variant=\"secondary\" className=\"ml-2\">\n                {categoryCounts[key] || 0}\n              </Badge>\n            </Button>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Trending Topics */}\n      <TrendingDashboard />\n\n      {/* Time Filters */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg\">\n            <i className=\"fas fa-clock mr-2 text-muted-foreground\"></i>\n            Time Range\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-2\">\n          {Object.entries(TIME_RANGES).map(([key, label]) => (\n            <Button\n              key={key}\n              variant={filters.timeRange === key ? \"default\" : \"ghost\"}\n              className=\"w-full justify-start\"\n              onClick={() => onFilterChange({ timeRange: key as any })}\n              data-testid={`button-time-${key}`}\n            >\n              {label}\n            </Button>\n          ))}\n        </CardContent>\n      </Card>\n\n      {/* Stats Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg\">\n            <i className=\"fas fa-chart-bar mr-2 text-tech-green\"></i>\n            Today's Stats\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-muted-foreground\">Total Articles</span>\n            <span className=\"font-semibold\" data-testid=\"text-total-articles\">\n              {categoryCounts.all || 0}\n            </span>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-muted-foreground\">AI/ML News</span>\n            <span className=\"font-semibold text-tech-green\" data-testid=\"text-ai-articles\">\n              {categoryCounts.ai_ml || 0}\n            </span>\n          </div>\n          \n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-sm text-muted-foreground\">Startup News</span>\n            <span className=\"font-semibold text-purple-600\" data-testid=\"text-startup-articles\">\n              {categoryCounts.startups || 0}\n            </span>\n          </div>\n          \n          <div className=\"pt-2 border-t border-border\">\n            <div className=\"flex items-center text-xs text-muted-foreground\">\n              <i className=\"fas fa-sync-alt mr-1\"></i>\n              <span>Auto-updated every 5 min</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4327},"client/src/components/news/article-card.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ArticleWithSource, CATEGORY_COLORS, SENTIMENT_COLORS, SENTIMENT_ICONS } from \"@/types/news\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ArticleCardProps {\n  article: ArticleWithSource;\n  onClick: () => void;\n  featured?: boolean;\n}\n\nexport default function ArticleCard({ article, onClick, featured = false }: ArticleCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isBookmarked, setIsBookmarked] = useState(article.isBookmarked || false);\n\n  const bookmarkMutation = useMutation({\n    mutationFn: async () => {\n      if (isBookmarked) {\n        await apiRequest('DELETE', `/api/bookmarks/${article.id}`);\n      } else {\n        await apiRequest('POST', '/api/bookmarks', { articleId: article.id });\n      }\n    },\n    onSuccess: () => {\n      setIsBookmarked(!isBookmarked);\n      queryClient.invalidateQueries({ queryKey: ['/api/bookmarks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/articles'] });\n      \n      toast({\n        title: isBookmarked ? \"Removed from bookmarks\" : \"Added to bookmarks\",\n        description: `Article \"${article.title}\" ${isBookmarked ? 'removed from' : 'added to'} your reading list.`,\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/auth/google\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: `Failed to ${isBookmarked ? 'remove' : 'add'} bookmark`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBookmark = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    bookmarkMutation.mutate();\n  };\n\n  const handleShare = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    \n    if (navigator.share) {\n      navigator.share({\n        title: article.title,\n        text: article.snippet || '',\n        url: article.url,\n      }).catch(() => {\n        // Fallback to clipboard\n        navigator.clipboard.writeText(article.url);\n        toast({\n          title: \"Link copied\",\n          description: \"Article link copied to clipboard\",\n        });\n      });\n    } else {\n      navigator.clipboard.writeText(article.url);\n      toast({\n        title: \"Link copied\",\n        description: \"Article link copied to clipboard\",\n      });\n    }\n  };\n\n  const handleAIChat = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onClick(); // This will open the article modal where chat can be accessed\n  };\n\n  const getTimeAgo = () => {\n    if (!article.publishedAt) return 'Unknown time';\n    try {\n      return formatDistanceToNow(new Date(article.publishedAt), { addSuffix: true });\n    } catch {\n      return 'Unknown time';\n    }\n  };\n\n  const getSentimentIcon = () => {\n    if (!article.sentiment) return null;\n    return SENTIMENT_ICONS[article.sentiment] || SENTIMENT_ICONS.neutral;\n  };\n\n  const getSentimentColor = () => {\n    if (!article.sentiment) return SENTIMENT_COLORS.neutral;\n    return SENTIMENT_COLORS[article.sentiment] || SENTIMENT_COLORS.neutral;\n  };\n\n  const getCategoryColor = () => {\n    return CATEGORY_COLORS[article.category] || CATEGORY_COLORS.others;\n  };\n\n  if (featured) {\n    return (\n      <article \n        className=\"bg-card rounded-xl shadow-sm border border-border overflow-hidden hover:shadow-md transition-shadow cursor-pointer\"\n        onClick={onClick}\n        data-testid={`card-article-${article.id}`}\n      >\n        <div className=\"md:flex\">\n          <div className=\"md:w-1/3\">\n            {article.thumbnail ? (\n              <img\n                src={article.thumbnail}\n                alt={article.title}\n                className=\"w-full h-48 md:h-full object-cover\"\n                data-testid={`img-thumbnail-${article.id}`}\n                onError={(e) => {\n                  // Fallback to default placeholder on error\n                  e.currentTarget.style.display = 'none';\n                  e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                }}\n              />\n            ) : null}\n            <div className={`w-full h-48 md:h-full bg-gradient-to-br from-primary/10 to-primary/20 flex items-center justify-center ${article.thumbnail ? 'hidden' : ''}`}>\n              <div className=\"text-center\">\n                <i className=\"fas fa-newspaper text-primary text-4xl mb-2\"></i>\n                <div className=\"text-primary font-medium text-sm\">TechPulse</div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"md:w-2/3 p-6\">\n            <div className=\"flex items-start justify-between mb-3\">\n              <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n                <span className=\"font-medium text-tech-blue\" data-testid={`text-source-${article.id}`}>\n                  {article.source?.name || 'Unknown Source'}\n                </span>\n                <span>•</span>\n                <span data-testid={`text-time-${article.id}`}>{getTimeAgo()}</span>\n                <Badge className={`text-xs ${getCategoryColor()}`} data-testid={`badge-category-${article.id}`}>\n                  {article.category.replace('_', '/')}\n                </Badge>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleBookmark}\n                disabled={bookmarkMutation.isPending}\n                className={`text-muted-foreground hover:text-tech-blue transition-colors ${isBookmarked ? 'text-tech-blue' : ''}`}\n                data-testid={`button-bookmark-${article.id}`}\n                aria-label={isBookmarked ? \"Remove bookmark\" : \"Add bookmark\"}\n              >\n                <i className={`${isBookmarked ? 'fas' : 'far'} fa-bookmark`}></i>\n              </Button>\n            </div>\n            \n            <h3 className=\"text-xl font-bold mb-2 line-clamp-2 text-foreground\" data-testid={`text-title-${article.id}`}>\n              {article.title}\n            </h3>\n            \n            <p className=\"text-muted-foreground mb-4 line-clamp-3\" data-testid={`text-snippet-${article.id}`}>\n              {article.snippet || 'No description available.'}\n            </p>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                {article.sentiment && (\n                  <span className={`flex items-center text-sm ${getSentimentColor()}`} data-testid={`text-sentiment-${article.id}`}>\n                    <i className={`${getSentimentIcon()} mr-1`}></i>\n                    {article.sentiment.charAt(0).toUpperCase() + article.sentiment.slice(1)} sentiment\n                  </span>\n                )}\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleAIChat}\n                  className=\"text-tech-blue hover:text-blue-600 transition-colors\"\n                  data-testid={`button-ai-chat-${article.id}`}\n                >\n                  <i className=\"fas fa-robot mr-1\"></i>\n                  Ask AI\n                </Button>\n              </div>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleShare}\n                className=\"text-muted-foreground hover:text-foreground transition-colors\"\n                data-testid={`button-share-${article.id}`}\n                aria-label=\"Share article\"\n              >\n                <i className=\"fas fa-share\"></i>\n              </Button>\n            </div>\n            \n            {article.viewCount > 0 && (\n              <div className=\"mt-2 text-xs text-muted-foreground\">\n                <i className=\"fas fa-eye mr-1\"></i>\n                {article.viewCount} views\n              </div>\n            )}\n          </div>\n        </div>\n      </article>\n    );\n  }\n\n  return (\n    <article \n      className=\"bg-card rounded-xl shadow-sm border border-border p-3 sm:p-6 hover:shadow-md transition-shadow cursor-pointer\"\n      onClick={onClick}\n      data-testid={`card-article-${article.id}`}\n    >\n      <div className=\"flex space-x-3 sm:space-x-4\">\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between mb-2 sm:mb-3\">\n            <div className=\"flex items-center flex-wrap gap-1 sm:gap-2 text-xs sm:text-sm text-muted-foreground mb-1 sm:mb-0\">\n              <span className=\"font-medium text-tech-blue\" data-testid={`text-source-${article.id}`}>\n                {article.source?.name || 'Unknown Source'}\n              </span>\n              <span className=\"hidden sm:inline\">•</span>\n              <span data-testid={`text-time-${article.id}`}>{getTimeAgo()}</span>\n              <Badge className={`text-xs ${getCategoryColor()} hidden sm:inline-flex`} data-testid={`badge-category-${article.id}`}>\n                {article.category.replace('_', '/')}\n              </Badge>\n            </div>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleBookmark}\n              disabled={bookmarkMutation.isPending}\n              className={`text-muted-foreground hover:text-tech-blue transition-colors ${isBookmarked ? 'text-tech-blue' : ''}`}\n              data-testid={`button-bookmark-${article.id}`}\n              aria-label={isBookmarked ? \"Remove bookmark\" : \"Add bookmark\"}\n            >\n              <i className={`${isBookmarked ? 'fas' : 'far'} fa-bookmark`}></i>\n            </Button>\n          </div>\n          \n          <h3 className=\"text-base sm:text-lg font-bold mb-2 line-clamp-2 text-foreground\" data-testid={`text-title-${article.id}`}>\n            {article.title}\n          </h3>\n          \n          <p className=\"text-muted-foreground mb-3 sm:mb-4 line-clamp-2 text-sm\" data-testid={`text-snippet-${article.id}`}>\n            {article.snippet || 'No description available.'}\n          </p>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              {article.sentiment && (\n                <span className={`flex items-center text-xs sm:text-sm ${getSentimentColor()}`} data-testid={`text-sentiment-${article.id}`}>\n                  <i className={`${getSentimentIcon()} mr-1`}></i>\n                  <span className=\"hidden sm:inline\">{article.sentiment.charAt(0).toUpperCase() + article.sentiment.slice(1)} sentiment</span>\n                  <span className=\"sm:hidden\">{article.sentiment}</span>\n                </span>\n              )}\n              \n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleAIChat}\n                className=\"text-tech-blue hover:text-blue-600 transition-colors text-xs sm:text-sm h-7 px-2 sm:h-8 sm:px-3\"\n                data-testid={`button-ai-chat-${article.id}`}\n              >\n                <i className=\"fas fa-robot mr-1\"></i>\n                <span className=\"hidden sm:inline\">Ask AI</span>\n                <span className=\"sm:hidden\">AI</span>\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-1 sm:space-x-2\">\n              {article.viewCount > 0 && (\n                <span className=\"text-xs text-muted-foreground hidden sm:inline\">\n                  <i className=\"fas fa-eye mr-1\"></i>\n                  {article.viewCount}\n                </span>\n              )}\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={handleShare}\n                className=\"text-muted-foreground hover:text-foreground transition-colors w-7 h-7 sm:w-8 sm:h-8\"\n                data-testid={`button-share-${article.id}`}\n                aria-label=\"Share article\"\n              >\n                <i className=\"fas fa-share text-xs\"></i>\n              </Button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"w-16 h-16 sm:w-24 sm:h-24 flex-shrink-0\">\n          {article.thumbnail ? (\n            <img\n              src={article.thumbnail}\n              alt={article.title}\n              className=\"w-full h-full object-cover rounded-lg\"\n              data-testid={`img-thumbnail-${article.id}`}\n              onError={(e) => {\n                e.currentTarget.style.display = 'none';\n                e.currentTarget.nextElementSibling?.classList.remove('hidden');\n              }}\n            />\n          ) : null}\n          <div className={`w-full h-full bg-gradient-to-br from-primary/10 to-primary/20 rounded-lg flex items-center justify-center ${article.thumbnail ? 'hidden' : ''}`}>\n            <i className=\"fas fa-newspaper text-primary text-sm sm:text-xl\"></i>\n          </div>\n        </div>\n      </div>\n    </article>\n  );\n}\n","size_bytes":13412},"client/src/components/news/article-modal.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ArticleWithSource, CATEGORY_COLORS, SENTIMENT_COLORS, SENTIMENT_ICONS } from \"@/types/news\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface ArticleModalProps {\n  article: ArticleWithSource | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onChatOpen: (article: ArticleWithSource) => void;\n}\n\nexport default function ArticleModal({ article, isOpen, onClose, onChatOpen }: ArticleModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: fullArticle, isLoading } = useQuery({\n    queryKey: [`/api/articles/${article?.id}`],\n    enabled: !!article?.id && isOpen,\n    retry: 1,\n  });\n\n  const bookmarkMutation = useMutation({\n    mutationFn: async () => {\n      if (!article) return;\n      \n      if (article.isBookmarked) {\n        await apiRequest('DELETE', `/api/bookmarks/${article.id}`);\n      } else {\n        await apiRequest('POST', '/api/bookmarks', { articleId: article.id });\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/bookmarks'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/articles'] });\n      \n      toast({\n        title: article?.isBookmarked ? \"Removed from bookmarks\" : \"Added to bookmarks\",\n        description: `Article \"${article?.title}\" ${article?.isBookmarked ? 'removed from' : 'added to'} your reading list.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${article?.isBookmarked ? 'remove' : 'add'} bookmark`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'hidden';\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape);\n      document.body.style.overflow = 'unset';\n    };\n  }, [isOpen, onClose]);\n\n  if (!article) return null;\n\n  const currentArticle = fullArticle || article;\n\n  const handleShare = () => {\n    if (navigator.share) {\n      navigator.share({\n        title: currentArticle.title,\n        text: currentArticle.snippet || '',\n        url: currentArticle.url,\n      }).catch(() => {\n        navigator.clipboard.writeText(currentArticle.url);\n        toast({\n          title: \"Link copied\",\n          description: \"Article link copied to clipboard\",\n        });\n      });\n    } else {\n      navigator.clipboard.writeText(currentArticle.url);\n      toast({\n        title: \"Link copied\",\n        description: \"Article link copied to clipboard\",\n      });\n    }\n  };\n\n  const handleOpenOriginal = () => {\n    window.open(currentArticle.url, '_blank');\n  };\n\n  const getTimeAgo = () => {\n    if (!currentArticle.publishedAt) return 'Unknown time';\n    try {\n      return formatDistanceToNow(new Date(currentArticle.publishedAt), { addSuffix: true });\n    } catch {\n      return 'Unknown time';\n    }\n  };\n\n  const getSentimentIcon = () => {\n    if (!currentArticle.sentiment) return null;\n    return SENTIMENT_ICONS[currentArticle.sentiment] || SENTIMENT_ICONS.neutral;\n  };\n\n  const getSentimentColor = () => {\n    if (!currentArticle.sentiment) return SENTIMENT_COLORS.neutral;\n    return SENTIMENT_COLORS[currentArticle.sentiment] || SENTIMENT_COLORS.neutral;\n  };\n\n  const getCategoryColor = () => {\n    return CATEGORY_COLORS[currentArticle.category] || CATEGORY_COLORS.others;\n  };\n\n  const formatContent = (content: string) => {\n    // Simple formatting - split into paragraphs\n    return content.split('\\n\\n').filter(p => p.trim()).map((paragraph, index) => (\n      <p key={index} className=\"mb-4 leading-relaxed\">\n        {paragraph}\n      </p>\n    ));\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"w-[95vw] max-w-4xl h-[95vh] max-h-[95vh] p-0 overflow-hidden\" data-testid=\"modal-article\">\n        <DialogHeader className=\"sr-only\">\n          <DialogTitle>{currentArticle.title}</DialogTitle>\n        </DialogHeader>\n        {/* Article Image */}\n        {currentArticle.thumbnail && (\n          <div className=\"w-full h-32 sm:h-48 md:h-64 overflow-hidden bg-muted flex-shrink-0\">\n            <img\n              src={currentArticle.thumbnail}\n              alt={currentArticle.title}\n              className=\"w-full h-full object-cover\"\n              data-testid=\"img-modal-thumbnail\"\n              onError={(e) => {\n                // Hide image on error\n                e.currentTarget.style.display = 'none';\n              }}\n            />\n          </div>\n        )}\n\n        {/* Header */}\n        <div className=\"p-3 sm:p-4 md:p-6 border-b border-border bg-card flex-shrink-0\">\n          <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center flex-wrap gap-1 sm:gap-2 text-xs sm:text-sm text-muted-foreground mb-2\">\n                <span className=\"font-medium text-tech-blue\" data-testid=\"text-modal-source\">\n                  {currentArticle.source?.name || 'Unknown Source'}\n                </span>\n                <span className=\"hidden sm:inline\">•</span>\n                <span data-testid=\"text-modal-time\">{getTimeAgo()}</span>\n                <Badge className={`text-xs ${getCategoryColor()}`} data-testid=\"badge-modal-category\">\n                  {currentArticle.category ? currentArticle.category.replace('_', '/') : 'others'}\n                </Badge>\n                {currentArticle.sentiment && (\n                  <span className={`flex items-center text-xs sm:text-sm ${getSentimentColor()}`} data-testid=\"text-modal-sentiment\">\n                    <i className={`${getSentimentIcon()} mr-1`}></i>\n                    <span className=\"hidden sm:inline\">{currentArticle.sentiment.charAt(0).toUpperCase() + currentArticle.sentiment.slice(1)}</span>\n                    <span className=\"sm:hidden\">{currentArticle.sentiment}</span>\n                  </span>\n                )}\n              </div>\n              \n              <h1 className=\"text-lg sm:text-xl md:text-2xl font-bold text-foreground leading-tight\" data-testid=\"text-modal-title\">\n                {currentArticle.title}\n              </h1>\n              \n              {currentArticle.viewCount > 0 && (\n                <div className=\"mt-2 text-xs sm:text-sm text-muted-foreground\">\n                  <i className=\"fas fa-eye mr-1\"></i>\n                  {currentArticle.viewCount} views\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex items-center gap-1 sm:gap-2 flex-shrink-0\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onChatOpen(currentArticle)}\n                className=\"text-primary hover:text-primary-foreground border-primary hover:bg-primary/10 text-xs h-8 px-2 sm:h-9 sm:px-3\"\n                data-testid=\"button-modal-chat\"\n                aria-label=\"Chat with AI about this article\"\n              >\n                <i className=\"fas fa-robot mr-1\"></i>\n                <span className=\"hidden sm:inline\">AI</span>\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => bookmarkMutation.mutate()}\n                disabled={bookmarkMutation.isPending}\n                className={`${currentArticle.isBookmarked ? 'text-primary border-primary bg-primary/10' : 'text-muted-foreground'} hover:text-primary hover:border-primary text-xs h-8 px-2 sm:h-9 sm:px-3`}\n                data-testid=\"button-modal-bookmark\"\n                aria-label={currentArticle.isBookmarked ? \"Remove bookmark\" : \"Add bookmark\"}\n              >\n                <i className={`${currentArticle.isBookmarked ? 'fas' : 'far'} fa-bookmark mr-1`}></i>\n                <span className=\"hidden sm:inline\">\n                  {currentArticle.isBookmarked ? 'Saved' : 'Save'}\n                </span>\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleShare}\n                className=\"text-muted-foreground hover:text-foreground w-8 h-8 sm:w-9 sm:h-9\"\n                data-testid=\"button-modal-share\"\n                aria-label=\"Share article\"\n              >\n                <i className=\"fas fa-share text-xs\"></i>\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                size=\"icon\"\n                onClick={handleOpenOriginal}\n                className=\"text-muted-foreground hover:text-foreground w-8 h-8 sm:w-9 sm:h-9\"\n                data-testid=\"button-modal-external\"\n                aria-label=\"Open original article\"\n              >\n                <i className=\"fas fa-external-link-alt text-xs\"></i>\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                onClick={onClose}\n                className=\"text-muted-foreground hover:text-foreground w-8 h-8 sm:w-9 sm:h-9\"\n                data-testid=\"button-modal-close\"\n                aria-label=\"Close modal\"\n              >\n                <i className=\"fas fa-times text-xs\"></i>\n              </Button>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <ScrollArea className=\"flex-1 min-h-0\">\n          <div className=\"p-3 sm:p-4 md:p-6\">\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                <div className=\"h-4 bg-muted rounded animate-pulse\"></div>\n                <div className=\"h-4 bg-muted rounded animate-pulse w-3/4\"></div>\n                <div className=\"h-4 bg-muted rounded animate-pulse w-1/2\"></div>\n              </div>\n            ) : (\n              <div className=\"prose prose-sm sm:prose dark:prose-invert max-w-none\" data-testid=\"content-modal-article\">\n                {currentArticle.snippet && (\n                  <div className=\"mb-6 p-4 bg-muted/50 rounded-lg border-l-4 border-primary\">\n                    <p className=\"text-muted-foreground italic text-sm sm:text-base\">\n                      {currentArticle.snippet}\n                    </p>\n                  </div>\n                )}\n                \n                {currentArticle.content ? (\n                  formatContent(currentArticle.content)\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <i className=\"fas fa-file-alt text-2xl sm:text-4xl mb-4\"></i>\n                    <p className=\"text-sm sm:text-base\">Full content not available. Please visit the original article.</p>\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleOpenOriginal}\n                      className=\"mt-4\"\n                      data-testid=\"button-read-original\"\n                    >\n                      <i className=\"fas fa-external-link-alt mr-2\"></i>\n                      Read Original Article\n                    </Button>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </ScrollArea>\n\n        {/* Related Articles */}\n        {currentArticle.relatedArticles && currentArticle.relatedArticles.length > 0 && (\n          <>\n            <Separator />\n            <div className=\"p-3 sm:p-4 md:p-6 bg-muted/30 flex-shrink-0\">\n              <h3 className=\"font-semibold mb-3 sm:mb-4 text-foreground text-sm sm:text-base\">Related Articles</h3>\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 sm:gap-4\">\n                {currentArticle.relatedArticles.slice(0, 3).map((relatedArticle) => (\n                  <div\n                    key={relatedArticle.id}\n                    className=\"bg-card border border-border rounded-lg p-3 sm:p-4 hover:shadow-md transition-shadow cursor-pointer\"\n                    onClick={() => {\n                      onClose();\n                      // Would need to trigger article selection in parent\n                    }}\n                    data-testid={`card-related-${relatedArticle.id}`}\n                  >\n                    <div className=\"flex items-center space-x-2 text-xs text-muted-foreground mb-2\">\n                      <span className=\"font-medium text-tech-blue\">\n                        {relatedArticle.source?.name || 'Unknown'}\n                      </span>\n                      <Badge className={`text-xs ${getCategoryColor()}`}>\n                        {relatedArticle.category.replace('_', '/')}\n                      </Badge>\n                    </div>\n                    \n                    <h4 className=\"font-medium text-sm line-clamp-2 text-foreground\">\n                      {relatedArticle.title}\n                    </h4>\n                    \n                    {relatedArticle.snippet && (\n                      <p className=\"text-xs text-muted-foreground mt-2 line-clamp-2\">\n                        {relatedArticle.snippet}\n                      </p>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":13906},"client/src/components/news/news-feed.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport ArticleCard from \"./article-card\";\nimport { ArticleWithSource, SearchFilters } from \"@/types/news\";\n\ninterface NewsFeedProps {\n  articles: ArticleWithSource[];\n  isLoading: boolean;\n  onArticleSelect: (article: ArticleWithSource) => void;\n  onLoadMore: () => void;\n  filters: SearchFilters;\n}\n\nexport default function NewsFeed({ \n  articles, \n  isLoading, \n  onArticleSelect, \n  onLoadMore,\n  filters \n}: NewsFeedProps) {\n  const [loadingMore, setLoadingMore] = useState(false);\n\n  const handleLoadMore = async () => {\n    setLoadingMore(true);\n    onLoadMore();\n    setTimeout(() => setLoadingMore(false), 1000);\n  };\n\n  const getFilterDescription = () => {\n    const parts = [];\n    \n    if (filters.category && filters.category !== 'all') {\n      parts.push(filters.category.replace('_', '/').toUpperCase());\n    }\n    \n    if (filters.timeRange) {\n      parts.push(filters.timeRange);\n    }\n    \n    if (filters.search) {\n      parts.push(`\"${filters.search}\"`);\n    }\n\n    return parts.length > 0 ? ` (${parts.join(', ')})` : '';\n  };\n\n  if (isLoading && articles.length === 0) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"space-y-2\">\n          <Skeleton className=\"h-8 w-64\" />\n          <Skeleton className=\"h-4 w-96\" />\n        </div>\n        \n        <div className=\"space-y-4\">\n          {Array.from({ length: 5 }).map((_, i) => (\n            <div key={i} className=\"bg-card rounded-xl border border-border p-6\">\n              <div className=\"flex space-x-4\">\n                <div className=\"flex-1 space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Skeleton className=\"h-4 w-20\" />\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-6 w-16\" />\n                  </div>\n                  <Skeleton className=\"h-6 w-full\" />\n                  <Skeleton className=\"h-4 w-full\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                </div>\n                <Skeleton className=\"w-24 h-24 rounded-lg\" />\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Feed Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">\n            Latest Tech News{getFilterDescription()}\n          </h2>\n          <p className=\"text-muted-foreground mt-1\">\n            {articles.length > 0 \n              ? `Found ${articles.length} article${articles.length !== 1 ? 's' : ''}`\n              : 'No articles found'\n            }\n          </p>\n        </div>\n      </div>\n\n      {/* Articles */}\n      {articles.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-newspaper text-muted-foreground text-xl\"></i>\n          </div>\n          <h3 className=\"text-lg font-semibold text-foreground mb-2\">No articles found</h3>\n          <p className=\"text-muted-foreground mb-4\">\n            Try adjusting your filters or search terms to find more content.\n          </p>\n          <Button\n            variant=\"outline\"\n            onClick={() => window.location.reload()}\n            data-testid=\"button-reload\"\n          >\n            <i className=\"fas fa-sync-alt mr-2\"></i>\n            Refresh Feed\n          </Button>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {articles.map((article, index) => (\n            <ArticleCard\n              key={article.id}\n              article={article}\n              onClick={() => onArticleSelect(article)}\n              featured={index === 0 && filters.category === 'all'}\n            />\n          ))}\n        </div>\n      )}\n\n      {/* Load More */}\n      {articles.length > 0 && articles.length >= (filters.limit || 20) && (\n        <div className=\"flex justify-center py-8\">\n          <Button\n            variant=\"outline\"\n            onClick={handleLoadMore}\n            disabled={loadingMore}\n            className=\"px-6 py-3\"\n            data-testid=\"button-load-more\"\n          >\n            {loadingMore ? (\n              <>\n                <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                Loading...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-chevron-down mr-2\"></i>\n                Load More Articles\n              </>\n            )}\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4731},"client/src/components/trending/trending-dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { TrendingTopic } from \"@/types/news\";\n\nexport default function TrendingDashboard() {\n  const { data: trendingTopics = [], isLoading } = useQuery({\n    queryKey: ['/api/trending', { range: 'today' }],\n    retry: 1,\n  });\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg\">\n            <i className=\"fas fa-trending-up mr-2 text-tech-green\"></i>\n            Trending Today\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          {Array.from({ length: 4 }).map((_, i) => (\n            <div key={i} className=\"flex items-center justify-between\">\n              <Skeleton className=\"h-4 w-24\" />\n              <Skeleton className=\"h-4 w-12\" />\n            </div>\n          ))}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const formatGrowthRate = (rate?: number) => {\n    if (!rate) return '+0%';\n    return rate > 0 ? `+${Math.round(rate)}%` : `${Math.round(rate)}%`;\n  };\n\n  const getGrowthColor = (rate?: number) => {\n    if (!rate) return 'text-muted-foreground';\n    if (rate > 50) return 'text-tech-green font-semibold';\n    if (rate > 20) return 'text-tech-green';\n    if (rate > 0) return 'text-yellow-600';\n    return 'text-red-500';\n  };\n\n  const capitalizeFirst = (str: string) => {\n    return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n  };\n\n  // Sort by growth rate and take top items\n  const topTrending = trendingTopics\n    .sort((a: TrendingTopic, b: TrendingTopic) => (b.growthRate || 0) - (a.growthRate || 0))\n    .slice(0, 6);\n\n  return (\n    <Card data-testid=\"trending-dashboard\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center text-lg\">\n          <i className=\"fas fa-trending-up mr-2 text-tech-green\"></i>\n          Trending Today\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {topTrending.length === 0 ? (\n          <div className=\"text-center py-6\">\n            <i className=\"fas fa-chart-line text-muted-foreground text-2xl mb-2\"></i>\n            <p className=\"text-sm text-muted-foreground\">\n              No trending topics available yet.\n            </p>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Check back later for trending analysis.\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-3\">\n            {topTrending.map((topic: TrendingTopic, index: number) => (\n              <div\n                key={topic.id}\n                className=\"flex items-center justify-between py-2 px-3 rounded-lg hover:bg-muted/50 transition-colors\"\n                data-testid={`trending-item-${index}`}\n              >\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium text-foreground truncate\" data-testid={`trending-topic-${index}`}>\n                      {capitalizeFirst(topic.topic)}\n                    </span>\n                    {topic.category && (\n                      <Badge variant=\"outline\" className=\"text-xs py-0 px-1\">\n                        {topic.category.replace('_', '/')}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2 mt-1\">\n                    <span className=\"text-xs text-muted-foreground\" data-testid={`trending-count-${index}`}>\n                      {topic.count} mentions\n                    </span>\n                    <span className={`text-xs ${getGrowthColor(topic.growthRate)}`} data-testid={`trending-growth-${index}`}>\n                      {formatGrowthRate(topic.growthRate)}\n                    </span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center space-x-1\">\n                  {topic.growthRate && topic.growthRate > 0 && (\n                    <i className=\"fas fa-arrow-up text-tech-green text-xs\"></i>\n                  )}\n                  {topic.growthRate && topic.growthRate < 0 && (\n                    <i className=\"fas fa-arrow-down text-red-500 text-xs\"></i>\n                  )}\n                </div>\n              </div>\n            ))}\n            \n            {/* Summary Stats */}\n            <div className=\"mt-6 pt-4 border-t border-border\">\n              <div className=\"grid grid-cols-2 gap-4 text-center\">\n                <div>\n                  <div className=\"text-lg font-semibold text-tech-green\" data-testid=\"trending-total-topics\">\n                    {trendingTopics.length}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Active Topics\n                  </div>\n                </div>\n                \n                <div>\n                  <div className=\"text-lg font-semibold text-tech-blue\" data-testid=\"trending-total-mentions\">\n                    {trendingTopics.reduce((sum: number, topic: TrendingTopic) => sum + topic.count, 0)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    Total Mentions\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-3 text-center\">\n                <div className=\"text-xs text-muted-foreground flex items-center justify-center\">\n                  <i className=\"fas fa-clock mr-1\"></i>\n                  <span>Updated hourly</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5860},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}